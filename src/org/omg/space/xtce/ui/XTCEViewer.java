/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package org.omg.space.xtce.ui;

import java.awt.BorderLayout;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import org.omg.space.xtce.toolkit.XTCEDatabaseException;
import org.omg.space.xtce.toolkit.XTCEParameter;
import org.omg.space.xtce.toolkit.XTCEDatabase;
import org.omg.space.xtce.toolkit.XTCEDatabaseExporterCsv;
import org.omg.space.xtce.toolkit.XTCEDatabaseExporter;
import org.omg.space.xtce.toolkit.XTCESpaceSystem;
import org.omg.space.xtce.toolkit.XTCETMContainer;
import org.omg.space.xtce.toolkit.XTCEContainerContentEntry;
import org.omg.space.xtce.toolkit.XTCEContainerContentModel;
import java.io.File;
import javax.swing.JFileChooser;
import java.awt.event.WindowEvent;
import java.io.FileOutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;
import org.omg.space.xtce.toolkit.XTCEContainerContentEntry.FieldType;
import org.omg.space.xtce.toolkit.XTCEContainerEntryValue;
import org.omg.space.xtce.toolkit.XTCEFunctions;
import org.omg.space.xtce.toolkit.XTCENamedObject;
import org.omg.space.xtce.toolkit.XTCESpaceSystemMetrics;
import org.omg.space.xtce.toolkit.XTCETMStream;
import org.omg.space.xtce.toolkit.XTCETelecommand;
import org.omg.space.xtce.toolkit.XTCETelecommandContentModel;
import org.omg.space.xtce.ui.XTCEViewerContainerDrawing.Orientation;

/** This class contains the XTCEViewer application with an executable main()
 * function.
 *
 * @author David Overeem
 *
 */

public class XTCEViewer extends javax.swing.JFrame {

    /** Creates a new XTCEViewer application Main Window.
     *
     *
     */

    public XTCEViewer() {

        prefs = XTCEViewerPreferences.getInstance();
        XTCEFunctions.setLocalePreference( prefs.getLanguagePreference() );
        initComponents();
        Thread.setDefaultUncaughtExceptionHandler( new XTCEViewerUncaughtExceptionHandler( this ) );
        buildSpaceSystemTrees(); // clears NetBeans defaults in the trees
        prefs.setParentWindow( this );
        prefs.updateRecentFilesList( mainWindowOpenRecentMenu, null );
        prefs.updateExampleFilesList( mainWindowOpenExampleMenu );
        mainWindowEditDocumentMenuItemActionPerformed( null );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spaceSystemDetailPopupMenu = new javax.swing.JPopupMenu();
        addSpaceSystemMenuItem = new javax.swing.JMenuItem();
        deleteSpaceSystemMenuItem = new javax.swing.JMenuItem();
        parameterDetailPopupMenu = new javax.swing.JPopupMenu();
        showXmlElementsMenuItem = new javax.swing.JMenuItem();
        showParameterDetailsMenuItem = new javax.swing.JMenuItem();
        showParameterUsageMenuItem = new javax.swing.JMenuItem();
        showEncodeDecodeDialogMenuItem = new javax.swing.JMenuItem();
        copyParameterCellMenuItem = new javax.swing.JMenuItem();
        containerDetailPopupMenu = new javax.swing.JPopupMenu();
        showContainerXmlMenuItem = new javax.swing.JMenuItem();
        containerTablePopupMenu = new javax.swing.JPopupMenu();
        showItemXmlElementsMenuItem = new javax.swing.JMenuItem();
        goToEntryMenuItem = new javax.swing.JMenuItem();
        setConditionTrueMenuItem = new javax.swing.JMenuItem();
        copyContainerCellMenuItem = new javax.swing.JMenuItem();
        containerDrawingPopupMenu = new javax.swing.JPopupMenu();
        saveContainerDrawingMenuItem = new javax.swing.JMenuItem();
        cloneContainerDrawingMenuItem = new javax.swing.JMenuItem();
        parameterFieldExclusion = new javax.swing.ButtonGroup();
        parameterLocationExclusion = new javax.swing.ButtonGroup();
        exportParametersButtonGroup = new javax.swing.ButtonGroup();
        parameterExportPanel = new javax.swing.JPanel();
        exportParametersLabel = new javax.swing.JLabel();
        exportParametersCsvRadioButton = new javax.swing.JRadioButton();
        exportParametersCppRadioButton = new javax.swing.JRadioButton();
        exportParametersInControlRadioButton = new javax.swing.JRadioButton();
        exportParametersCometRadioButton = new javax.swing.JRadioButton();
        exportParametersIncludeHeaderRowCheckbox = new javax.swing.JCheckBox();
        exportParametersUseNamespacesCheckbox = new javax.swing.JCheckBox();
        databaseMetricsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        spaceSystemsTotal = new javax.swing.JTextField();
        tmParametersTotal = new javax.swing.JTextField();
        tcParametersTotal = new javax.swing.JTextField();
        parametersTotal = new javax.swing.JTextField();
        tmParameterTypesTotal = new javax.swing.JTextField();
        tcParameterTypesTotal = new javax.swing.JTextField();
        parameterTypesTotal = new javax.swing.JTextField();
        argumentsTotal = new javax.swing.JTextField();
        argumentTypesTotal = new javax.swing.JTextField();
        telecommandsTotal = new javax.swing.JTextField();
        tmContainersTotal = new javax.swing.JTextField();
        tcContainersTotal = new javax.swing.JTextField();
        containersTotal = new javax.swing.JTextField();
        messagesDialogPanel = new javax.swing.JScrollPane();
        messagesDialogText = new javax.swing.JTextArea();
        loadedFilenameLabel = new javax.swing.JLabel();
        loadedSchemaLabel = new javax.swing.JLabel();
        mainWindowPrimaryWorkspace = new javax.swing.JTabbedPane();
        spaceSystemOverviewPanel = new javax.swing.JPanel();
        spaceSystemOverviewLabel = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        detailSpaceSystemTreeScrollPane = new javax.swing.JScrollPane();
        detailSpaceSystemTree = new javax.swing.JTree();
        detailSpaceSystemPanelScrollPane = new javax.swing.JScrollPane();
        tmParametersPanel = new javax.swing.JPanel();
        tmParametersOverviewLabel = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        tmParameterSpaceSystemTreeScrollPane = new javax.swing.JScrollPane();
        tmParameterSpaceSystemTree = new javax.swing.JTree();
        tmParametersTableScrollPane = new javax.swing.JScrollPane();
        tmParametersTable = new javax.swing.JTable();
        tcParametersPanel = new javax.swing.JPanel();
        tcParametersOverviewLabel = new javax.swing.JLabel();
        jSplitPane3 = new javax.swing.JSplitPane();
        tcParameterSpaceSystemTreeScrollPane = new javax.swing.JScrollPane();
        tcParameterSpaceSystemTree = new javax.swing.JTree();
        tcParametersTableScrollPane = new javax.swing.JScrollPane();
        tcParametersTable = new javax.swing.JTable();
        tmContainersPanel = new javax.swing.JPanel();
        tmContainerDetailsLabel = new javax.swing.JLabel();
        jSplitPane4 = new javax.swing.JSplitPane();
        tmContainerTreeScrollPane = new javax.swing.JScrollPane();
        tmContainerTree = new javax.swing.JTree();
        tmContainerContentSplitPane = new javax.swing.JSplitPane();
        tmContainerTableScrollPane = new javax.swing.JScrollPane();
        tmContainerTable = new javax.swing.JTable();
        tmContainerDrawingScrollPane = new javax.swing.JScrollPane();
        tcDefinitionsPanel = new javax.swing.JPanel();
        tcDefinitionsLabel = new javax.swing.JLabel();
        jSplitPane6 = new javax.swing.JSplitPane();
        tcDefinitionsScrollPane = new javax.swing.JScrollPane();
        tcDefinitionsSpaceSystemTree = new javax.swing.JTree();
        tcSpaceSystemSplitPane = new javax.swing.JSplitPane();
        tcTreeScrollPane = new javax.swing.JScrollPane();
        tcTree = new javax.swing.JTree();
        tcContentSplitPane = new javax.swing.JSplitPane();
        tcContentScrollPane = new javax.swing.JScrollPane();
        tcContentTable = new javax.swing.JTable();
        tcContentDrawingScrollPane = new javax.swing.JScrollPane();
        tmStreamsPanel = new javax.swing.JPanel();
        tmStreamDetailsLabel = new javax.swing.JLabel();
        jSplitPane5 = new javax.swing.JSplitPane();
        tmStreamTreeScrollPane = new javax.swing.JScrollPane();
        tmStreamTree = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        tmStreamContentTree = new javax.swing.JTree();
        tmTypesPanel = new javax.swing.JPanel();
        tcTypesPanel = new javax.swing.JPanel();
        mainWindowMessageScrollingPane = new javax.swing.JScrollPane();
        messagesText = new javax.swing.JTextArea();
        messagesOutputLabel = new javax.swing.JLabel();
        mainWindowMenuBar = new javax.swing.JMenuBar();
        mainWindowFileMenu = new javax.swing.JMenu();
        mainWindowOpenFileMenuItem = new javax.swing.JMenuItem();
        mainWindowOpenRecentMenu = new javax.swing.JMenu();
        mainWindowOpenExampleMenu = new javax.swing.JMenu();
        mainWindowSaveFileMenuItem = new javax.swing.JMenuItem();
        mainWindowCloseFileMenuItem = new javax.swing.JMenuItem();
        mainWindowCreateFileMenuItem = new javax.swing.JMenuItem();
        mainWindowExitMenuItem = new javax.swing.JMenuItem();
        mainWindowEditMenu = new javax.swing.JMenu();
        mainWindowClearMessagesMenuItem = new javax.swing.JMenuItem();
        mainWindowFindMenu = new javax.swing.JMenu();
        mainWindowFindSpaceSystemMenuItem = new javax.swing.JMenuItem();
        mainWindowFindParameterMenuItem = new javax.swing.JMenuItem();
        mainWindowFindContainerMenuItem = new javax.swing.JMenuItem();
        mainWindowFindTelecommandMenuItem = new javax.swing.JMenuItem();
        mainWindowFindByXPathMenuItem = new javax.swing.JMenuItem();
        mainWindowShowMenu = new javax.swing.JMenu();
        mainWindowExpandAllSpaceSystemTreeMenuItem = new javax.swing.JMenuItem();
        mainWindowExpandContainerTreeMenuItem = new javax.swing.JMenuItem();
        mainWindowMessagesDialogMenuItem = new javax.swing.JMenuItem();
        mainWindowShowMetricsMenuItem = new javax.swing.JMenuItem();
        mainWindowExportMenu = new javax.swing.JMenu();
        mainWindowExportParametersMenuItem = new javax.swing.JMenuItem();
        mainWindowOptionsMenu = new javax.swing.JMenu();
        mainWindowValidateOnLoadMenuItem = new javax.swing.JCheckBoxMenuItem();
        mainWindowShowAliasNamespaceMenuItem = new javax.swing.JCheckBoxMenuItem();
        mainWindowPreferredNamespaceMenuItem = new javax.swing.JMenuItem();
        mainWindowRecentFilesMaxMenuItem = new javax.swing.JMenuItem();
        mainWindowClearRecentFilesMenuItem = new javax.swing.JMenuItem();
        mainWindowUseXincludeMenuItem = new javax.swing.JCheckBoxMenuItem();
        mainWindowLocaleMenuItem = new javax.swing.JMenuItem();
        mainWindowShowAllConditionalsMenuItem = new javax.swing.JCheckBoxMenuItem();
        containerDrawingOrientationMenu = new javax.swing.JMenu();
        containerDrawingLeftToRight = new javax.swing.JRadioButtonMenuItem();
        containerDrawingTopToBottom = new javax.swing.JRadioButtonMenuItem();
        mainWindowEditDocumentMenuItem = new javax.swing.JCheckBoxMenuItem();
        mainWindowHelpMenu = new javax.swing.JMenu();
        mainWindowHelpSchemaMenuItem = new javax.swing.JMenuItem();
        mainWindowHelpApiMenuItem = new javax.swing.JMenuItem();
        mainWindowHelpToolMenuItem = new javax.swing.JMenuItem();
        mainWindowHelpCurrentMenuItem = new javax.swing.JMenuItem();
        mainWindowHelpAboutMenuItem = new javax.swing.JMenuItem();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/omg/space/xtce/toolkit/MessagesBundle"); // NOI18N
        addSpaceSystemMenuItem.setText(bundle.getString("options_popup_add_spacesystem")); // NOI18N
        addSpaceSystemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSpaceSystemMenuItemActionPerformed(evt);
            }
        });
        spaceSystemDetailPopupMenu.add(addSpaceSystemMenuItem);

        deleteSpaceSystemMenuItem.setText(bundle.getString("options_popup_delete_spacesystem")); // NOI18N
        deleteSpaceSystemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteSpaceSystemMenuItemActionPerformed(evt);
            }
        });
        spaceSystemDetailPopupMenu.add(deleteSpaceSystemMenuItem);

        showXmlElementsMenuItem.setText(bundle.getString("options_popup_showxmlelements")); // NOI18N
        showXmlElementsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showXmlElementsMenuItemActionPerformed(evt);
            }
        });
        parameterDetailPopupMenu.add(showXmlElementsMenuItem);

        showParameterDetailsMenuItem.setText(bundle.getString("options_popup_showparameterdetails")); // NOI18N
        showParameterDetailsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showParameterDetailsMenuItemActionPerformed(evt);
            }
        });
        parameterDetailPopupMenu.add(showParameterDetailsMenuItem);

        showParameterUsageMenuItem.setText(bundle.getString("options_popup_showparameterusage")); // NOI18N
        showParameterUsageMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showParameterUsageMenuItemActionPerformed(evt);
            }
        });
        parameterDetailPopupMenu.add(showParameterUsageMenuItem);

        showEncodeDecodeDialogMenuItem.setText("Encode/Decode Values");
        showEncodeDecodeDialogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showEncodeDecodeDialogMenuItemActionPerformed(evt);
            }
        });
        parameterDetailPopupMenu.add(showEncodeDecodeDialogMenuItem);

        copyParameterCellMenuItem.setText(bundle.getString("general_copy_cell")); // NOI18N
        copyParameterCellMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyParameterCellMenuItemActionPerformed(evt);
            }
        });
        parameterDetailPopupMenu.add(copyParameterCellMenuItem);

        showContainerXmlMenuItem.setText(bundle.getString("options_popup_showcontainerxml")); // NOI18N
        showContainerXmlMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showContainerXmlMenuItemActionPerformed(evt);
            }
        });
        containerDetailPopupMenu.add(showContainerXmlMenuItem);

        showItemXmlElementsMenuItem.setText(bundle.getString("options_popup_showxmlelements")); // NOI18N
        showItemXmlElementsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showItemXmlElementsMenuItemActionPerformed(evt);
            }
        });
        containerTablePopupMenu.add(showItemXmlElementsMenuItem);

        goToEntryMenuItem.setText(bundle.getString("options_popup_gotoentry")); // NOI18N
        goToEntryMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToEntryMenuItemActionPerformed(evt);
            }
        });
        containerTablePopupMenu.add(goToEntryMenuItem);

        setConditionTrueMenuItem.setText(bundle.getString("options_popup_setcondition")); // NOI18N
        setConditionTrueMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setConditionTrueMenuItemActionPerformed(evt);
            }
        });
        containerTablePopupMenu.add(setConditionTrueMenuItem);

        copyContainerCellMenuItem.setText(bundle.getString("general_copy_cell")); // NOI18N
        copyContainerCellMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyContainerCellMenuItemActionPerformed(evt);
            }
        });
        containerTablePopupMenu.add(copyContainerCellMenuItem);

        saveContainerDrawingMenuItem.setText(bundle.getString("options_popup_savedrawing")); // NOI18N
        saveContainerDrawingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveContainerDrawingMenuItemActionPerformed(evt);
            }
        });
        containerDrawingPopupMenu.add(saveContainerDrawingMenuItem);

        cloneContainerDrawingMenuItem.setText(bundle.getString("options_popup_clonecontainer")); // NOI18N
        cloneContainerDrawingMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cloneContainerDrawingMenuItemActionPerformed(evt);
            }
        });
        containerDrawingPopupMenu.add(cloneContainerDrawingMenuItem);

        exportParametersLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exportParametersLabel.setText(bundle.getString("dialog_export_parameters_options_title")); // NOI18N
        exportParametersLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        exportParametersButtonGroup.add(exportParametersCsvRadioButton);
        exportParametersCsvRadioButton.setSelected(true);
        exportParametersCsvRadioButton.setText(bundle.getString("dialog_export_parameters_options_csv_text")); // NOI18N

        exportParametersButtonGroup.add(exportParametersCppRadioButton);
        exportParametersCppRadioButton.setText(bundle.getString("dialog_export_parameters_options_cxx_text")); // NOI18N

        exportParametersButtonGroup.add(exportParametersInControlRadioButton);
        exportParametersInControlRadioButton.setText(bundle.getString("dialog_export_parameters_options_incng_text")); // NOI18N

        exportParametersButtonGroup.add(exportParametersCometRadioButton);
        exportParametersCometRadioButton.setText(bundle.getString("dialog_export_parameters_options_osc_text")); // NOI18N

        exportParametersIncludeHeaderRowCheckbox.setSelected(true);
        exportParametersIncludeHeaderRowCheckbox.setText(bundle.getString("dialog_export_parameters_options_header_row_text")); // NOI18N

        exportParametersUseNamespacesCheckbox.setText(bundle.getString("dialog_export_parameters_options_ss_2_ns_text")); // NOI18N

        javax.swing.GroupLayout parameterExportPanelLayout = new javax.swing.GroupLayout(parameterExportPanel);
        parameterExportPanel.setLayout(parameterExportPanelLayout);
        parameterExportPanelLayout.setHorizontalGroup(
            parameterExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parameterExportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(parameterExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(parameterExportPanelLayout.createSequentialGroup()
                        .addComponent(exportParametersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(parameterExportPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(parameterExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exportParametersCppRadioButton)
                            .addComponent(exportParametersCsvRadioButton)
                            .addComponent(exportParametersInControlRadioButton)
                            .addComponent(exportParametersCometRadioButton)
                            .addComponent(exportParametersIncludeHeaderRowCheckbox)
                            .addComponent(exportParametersUseNamespacesCheckbox))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        parameterExportPanelLayout.setVerticalGroup(
            parameterExportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parameterExportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(exportParametersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportParametersCsvRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportParametersCppRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportParametersInControlRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportParametersCometRadioButton)
                .addGap(18, 18, 18)
                .addComponent(exportParametersIncludeHeaderRowCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportParametersUseNamespacesCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel1.setText(bundle.getString("dialog_metrics_databasetotals_label")); // NOI18N

        jLabel2.setText(bundle.getString("dialog_metrics_spacesystemcount_text")); // NOI18N

        jLabel3.setText(bundle.getString("dialog_metrics_tmparameters_text")); // NOI18N

        jLabel4.setText(bundle.getString("dialog_metrics_tcparameters_text")); // NOI18N

        jLabel5.setText(bundle.getString("dialog_metrics_totalparameters_text")); // NOI18N

        jLabel6.setText(bundle.getString("dialog_metrics_tmparametertypes_text")); // NOI18N

        jLabel7.setText(bundle.getString("dialog_metrics_tcparametertypes_text")); // NOI18N

        jLabel8.setText(bundle.getString("dialog_metrics_totalparametertypes_text")); // NOI18N

        jLabel9.setText(bundle.getString("dialog_metrics_tcarguments_text")); // NOI18N

        jLabel10.setText(bundle.getString("dialog_metrics_tcargumenttypes_text")); // NOI18N

        jLabel11.setText(bundle.getString("dialog_metrics_telecommands_text")); // NOI18N

        jLabel12.setText(bundle.getString("dialog_metrics_tmcontainers_text")); // NOI18N

        jLabel13.setText(bundle.getString("dialog_metrics_tccontainers_text")); // NOI18N

        jLabel14.setText(bundle.getString("dialog_metrics_totalcontainers_text")); // NOI18N

        spaceSystemsTotal.setEditable(false);

        tmParametersTotal.setEditable(false);

        tcParametersTotal.setEditable(false);

        parametersTotal.setEditable(false);

        tmParameterTypesTotal.setEditable(false);

        tcParameterTypesTotal.setEditable(false);

        parameterTypesTotal.setEditable(false);

        argumentsTotal.setEditable(false);

        argumentTypesTotal.setEditable(false);

        telecommandsTotal.setEditable(false);

        tmContainersTotal.setEditable(false);

        tcContainersTotal.setEditable(false);

        containersTotal.setEditable(false);

        javax.swing.GroupLayout databaseMetricsPanelLayout = new javax.swing.GroupLayout(databaseMetricsPanel);
        databaseMetricsPanel.setLayout(databaseMetricsPanelLayout);
        databaseMetricsPanelLayout.setHorizontalGroup(
            databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseMetricsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databaseMetricsPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databaseMetricsPanelLayout.createSequentialGroup()
                        .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(59, 59, 59)
                        .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tmParametersTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(spaceSystemsTotal)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, databaseMetricsPanelLayout.createSequentialGroup()
                        .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel13)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tcParametersTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                            .addComponent(parametersTotal)
                            .addComponent(tmParameterTypesTotal)
                            .addComponent(tcParameterTypesTotal)
                            .addComponent(parameterTypesTotal)
                            .addComponent(argumentsTotal)
                            .addComponent(argumentTypesTotal)
                            .addComponent(telecommandsTotal)
                            .addComponent(tmContainersTotal)
                            .addComponent(tcContainersTotal)
                            .addComponent(containersTotal))))
                .addContainerGap())
        );
        databaseMetricsPanelLayout.setVerticalGroup(
            databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(databaseMetricsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spaceSystemsTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tmParametersTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tcParametersTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parametersTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tmParameterTypesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tcParameterTypesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterTypesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(argumentsTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(argumentTypesTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telecommandsTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tmContainersTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tcContainersTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(databaseMetricsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(containersTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        messagesDialogPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        messagesDialogPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        messagesDialogPanel.setMinimumSize(new java.awt.Dimension(640, 480));
        messagesDialogPanel.setPreferredSize(new java.awt.Dimension(800, 600));

        messagesDialogText.setColumns(20);
        messagesDialogText.setRows(5);
        messagesDialogPanel.setViewportView(messagesDialogText);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("xtceview");
        setMinimumSize(new java.awt.Dimension(800, 600));

        loadedFilenameLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadedFilenameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadedFilenameLabel.setText(bundle.getString("openfile_default_text_label")); // NOI18N

        loadedSchemaLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        loadedSchemaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loadedSchemaLabel.setText(bundle.getString("openfile_default_schema_label")); // NOI18N

        spaceSystemOverviewLabel.setText(bundle.getString("tab_desc_spacesystems_label")); // NOI18N

        detailSpaceSystemTreeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        detailSpaceSystemTreeScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        detailSpaceSystemTreeScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        detailSpaceSystemTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        detailSpaceSystemTree.setMinimumSize(new java.awt.Dimension(100, 0));
        detailSpaceSystemTree.setPreferredSize(new java.awt.Dimension(100, 0));
        detailSpaceSystemTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                detailSpaceSystemTreeMousePressed(evt);
            }
        });
        detailSpaceSystemTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                detailSpaceSystemTreeValueChanged(evt);
            }
        });
        detailSpaceSystemTreeScrollPane.setViewportView(detailSpaceSystemTree);

        jSplitPane1.setLeftComponent(detailSpaceSystemTreeScrollPane);

        detailSpaceSystemPanelScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jSplitPane1.setRightComponent(detailSpaceSystemPanelScrollPane);

        javax.swing.GroupLayout spaceSystemOverviewPanelLayout = new javax.swing.GroupLayout(spaceSystemOverviewPanel);
        spaceSystemOverviewPanel.setLayout(spaceSystemOverviewPanelLayout);
        spaceSystemOverviewPanelLayout.setHorizontalGroup(
            spaceSystemOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spaceSystemOverviewPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(spaceSystemOverviewLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
        );
        spaceSystemOverviewPanelLayout.setVerticalGroup(
            spaceSystemOverviewPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spaceSystemOverviewPanelLayout.createSequentialGroup()
                .addComponent(spaceSystemOverviewLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_spacesystems_label"), spaceSystemOverviewPanel); // NOI18N

        tmParametersOverviewLabel.setText(bundle.getString("tab_desc_tmparameters_label")); // NOI18N

        tmParameterSpaceSystemTreeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tmParameterSpaceSystemTreeScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        tmParameterSpaceSystemTreeScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        tmParameterSpaceSystemTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tmParameterSpaceSystemTree.setMinimumSize(new java.awt.Dimension(100, 0));
        tmParameterSpaceSystemTree.setPreferredSize(new java.awt.Dimension(100, 0));
        tmParameterSpaceSystemTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tmParameterSpaceSystemTreeMousePressed(evt);
            }
        });
        tmParameterSpaceSystemTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tmParameterSpaceSystemTreeValueChanged(evt);
            }
        });
        tmParameterSpaceSystemTreeScrollPane.setViewportView(tmParameterSpaceSystemTree);

        jSplitPane2.setLeftComponent(tmParameterSpaceSystemTreeScrollPane);

        tmParametersTable.setAutoCreateRowSorter(true);
        tmParametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Alias(s)", "Type", "Unit(s)", "Size", "Encoding", "Source", "ReadOnly", "Default Value", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tmParametersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tmParametersTableMousePressed(evt);
            }
        });
        tmParametersTableScrollPane.setViewportView(tmParametersTable);
        if (tmParametersTable.getColumnModel().getColumnCount() > 0) {
            tmParametersTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            tmParametersTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("table_parameters_name_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            tmParametersTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("table_parameters_aliases_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(2).setMinWidth(0);
            tmParametersTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            tmParametersTable.getColumnModel().getColumn(2).setMaxWidth(100);
            tmParametersTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("table_parameters_type_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("table_parameters_unit_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(4).setMinWidth(65);
            tmParametersTable.getColumnModel().getColumn(4).setPreferredWidth(65);
            tmParametersTable.getColumnModel().getColumn(4).setMaxWidth(65);
            tmParametersTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("table_parameters_size_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(5).setMinWidth(0);
            tmParametersTable.getColumnModel().getColumn(5).setPreferredWidth(120);
            tmParametersTable.getColumnModel().getColumn(5).setMaxWidth(120);
            tmParametersTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("table_parameters_encoding_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(6).setMinWidth(0);
            tmParametersTable.getColumnModel().getColumn(6).setPreferredWidth(95);
            tmParametersTable.getColumnModel().getColumn(6).setMaxWidth(95);
            tmParametersTable.getColumnModel().getColumn(6).setHeaderValue(bundle.getString("table_parameters_source_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(7).setMinWidth(0);
            tmParametersTable.getColumnModel().getColumn(7).setPreferredWidth(65);
            tmParametersTable.getColumnModel().getColumn(7).setMaxWidth(65);
            tmParametersTable.getColumnModel().getColumn(7).setHeaderValue(bundle.getString("table_parameters_readonly_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(8).setMinWidth(0);
            tmParametersTable.getColumnModel().getColumn(8).setPreferredWidth(120);
            tmParametersTable.getColumnModel().getColumn(8).setHeaderValue(bundle.getString("table_parameters_defaultvalue_col_label")); // NOI18N
            tmParametersTable.getColumnModel().getColumn(9).setPreferredWidth(250);
            tmParametersTable.getColumnModel().getColumn(9).setHeaderValue(bundle.getString("table_parameters_desc_col_label")); // NOI18N
        }

        jSplitPane2.setRightComponent(tmParametersTableScrollPane);

        javax.swing.GroupLayout tmParametersPanelLayout = new javax.swing.GroupLayout(tmParametersPanel);
        tmParametersPanel.setLayout(tmParametersPanelLayout);
        tmParametersPanelLayout.setHorizontalGroup(
            tmParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tmParametersPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tmParametersOverviewLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
        );
        tmParametersPanelLayout.setVerticalGroup(
            tmParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tmParametersPanelLayout.createSequentialGroup()
                .addComponent(tmParametersOverviewLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tmparameters_label"), tmParametersPanel); // NOI18N

        tcParametersOverviewLabel.setText(bundle.getString("tab_desc_tcparameters_label")); // NOI18N

        tcParameterSpaceSystemTreeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tcParameterSpaceSystemTreeScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        tcParameterSpaceSystemTreeScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        tcParameterSpaceSystemTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tcParameterSpaceSystemTree.setMinimumSize(new java.awt.Dimension(100, 0));
        tcParameterSpaceSystemTree.setPreferredSize(new java.awt.Dimension(100, 0));
        tcParameterSpaceSystemTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tcParameterSpaceSystemTreeMousePressed(evt);
            }
        });
        tcParameterSpaceSystemTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tcParameterSpaceSystemTreeValueChanged(evt);
            }
        });
        tcParameterSpaceSystemTreeScrollPane.setViewportView(tcParameterSpaceSystemTree);

        jSplitPane3.setLeftComponent(tcParameterSpaceSystemTreeScrollPane);

        tcParametersTable.setAutoCreateRowSorter(true);
        tcParametersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Alias(s)", "Type", "Unit(s)", "Size", "Encoding", "Source", "ReadOnly", "Default Value", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tcParametersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tcParametersTableMousePressed(evt);
            }
        });
        tcParametersTableScrollPane.setViewportView(tcParametersTable);
        if (tcParametersTable.getColumnModel().getColumnCount() > 0) {
            tcParametersTable.getColumnModel().getColumn(0).setPreferredWidth(150);
            tcParametersTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("table_parameters_name_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(1).setPreferredWidth(100);
            tcParametersTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("table_parameters_aliases_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(2).setMinWidth(0);
            tcParametersTable.getColumnModel().getColumn(2).setPreferredWidth(100);
            tcParametersTable.getColumnModel().getColumn(2).setMaxWidth(100);
            tcParametersTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("table_parameters_type_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("table_parameters_unit_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(4).setMinWidth(65);
            tcParametersTable.getColumnModel().getColumn(4).setPreferredWidth(65);
            tcParametersTable.getColumnModel().getColumn(4).setMaxWidth(65);
            tcParametersTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("table_parameters_size_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(5).setMinWidth(0);
            tcParametersTable.getColumnModel().getColumn(5).setPreferredWidth(120);
            tcParametersTable.getColumnModel().getColumn(5).setMaxWidth(120);
            tcParametersTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("table_parameters_encoding_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(6).setMinWidth(0);
            tcParametersTable.getColumnModel().getColumn(6).setPreferredWidth(95);
            tcParametersTable.getColumnModel().getColumn(6).setMaxWidth(95);
            tcParametersTable.getColumnModel().getColumn(6).setHeaderValue(bundle.getString("table_parameters_source_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(7).setMinWidth(0);
            tcParametersTable.getColumnModel().getColumn(7).setPreferredWidth(65);
            tcParametersTable.getColumnModel().getColumn(7).setMaxWidth(65);
            tcParametersTable.getColumnModel().getColumn(7).setHeaderValue(bundle.getString("table_parameters_readonly_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(8).setMinWidth(0);
            tcParametersTable.getColumnModel().getColumn(8).setPreferredWidth(120);
            tcParametersTable.getColumnModel().getColumn(8).setHeaderValue(bundle.getString("table_parameters_defaultvalue_col_label")); // NOI18N
            tcParametersTable.getColumnModel().getColumn(9).setPreferredWidth(250);
            tcParametersTable.getColumnModel().getColumn(9).setHeaderValue(bundle.getString("table_parameters_desc_col_label")); // NOI18N
        }

        jSplitPane3.setRightComponent(tcParametersTableScrollPane);

        javax.swing.GroupLayout tcParametersPanelLayout = new javax.swing.GroupLayout(tcParametersPanel);
        tcParametersPanel.setLayout(tcParametersPanelLayout);
        tcParametersPanelLayout.setHorizontalGroup(
            tcParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tcParametersPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tcParametersOverviewLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1003, Short.MAX_VALUE)
        );
        tcParametersPanelLayout.setVerticalGroup(
            tcParametersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tcParametersPanelLayout.createSequentialGroup()
                .addComponent(tcParametersOverviewLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tcparameters_label"), tcParametersPanel); // NOI18N

        tmContainerDetailsLabel.setText(bundle.getString("tab_desc_tmcontainers_label")); // NOI18N

        tmContainerTreeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tmContainerTreeScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        tmContainerTreeScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        tmContainerTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tmContainerTree.setMinimumSize(new java.awt.Dimension(100, 0));
        tmContainerTree.setPreferredSize(new java.awt.Dimension(100, 0));
        tmContainerTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tmContainerTreeMousePressed(evt);
            }
        });
        tmContainerTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tmContainerTreeValueChanged(evt);
            }
        });
        tmContainerTreeScrollPane.setViewportView(tmContainerTree);

        jSplitPane4.setLeftComponent(tmContainerTreeScrollPane);

        tmContainerContentSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        tmContainerTableScrollPane.setMinimumSize(new java.awt.Dimension(0, 100));

        tmContainerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Container Name", "Parameter Name", "Parameter Alias(s)", "Size", "Start Bit", "Value", "Default Value", "Condition", "Repeat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tmContainerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tmContainerTableMousePressed(evt);
            }
        });
        tmContainerTableScrollPane.setViewportView(tmContainerTable);
        if (tmContainerTable.getColumnModel().getColumnCount() > 0) {
            tmContainerTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("table_containers_contname_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("table_containers_paramname_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("table_containers_paramaliases_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(3).setMinWidth(65);
            tmContainerTable.getColumnModel().getColumn(3).setPreferredWidth(65);
            tmContainerTable.getColumnModel().getColumn(3).setMaxWidth(65);
            tmContainerTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("table_containers_size_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(4).setMinWidth(65);
            tmContainerTable.getColumnModel().getColumn(4).setPreferredWidth(65);
            tmContainerTable.getColumnModel().getColumn(4).setMaxWidth(65);
            tmContainerTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("table_containers_startbit_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(5).setPreferredWidth(75);
            tmContainerTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("table_containers_value_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(6).setPreferredWidth(75);
            tmContainerTable.getColumnModel().getColumn(6).setHeaderValue(bundle.getString("table_containers_defaultvalue_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(7).setHeaderValue(bundle.getString("table_containers_condition_label")); // NOI18N
            tmContainerTable.getColumnModel().getColumn(8).setHeaderValue(bundle.getString("table_containers_repeat_label")); // NOI18N
        }

        tmContainerContentSplitPane.setLeftComponent(tmContainerTableScrollPane);

        tmContainerDrawingScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tmContainerDrawingScrollPaneMousePressed(evt);
            }
        });
        tmContainerContentSplitPane.setRightComponent(tmContainerDrawingScrollPane);

        jSplitPane4.setRightComponent(tmContainerContentSplitPane);

        javax.swing.GroupLayout tmContainersPanelLayout = new javax.swing.GroupLayout(tmContainersPanel);
        tmContainersPanel.setLayout(tmContainersPanelLayout);
        tmContainersPanelLayout.setHorizontalGroup(
            tmContainersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tmContainersPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tmContainerDetailsLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jSplitPane4)
        );
        tmContainersPanelLayout.setVerticalGroup(
            tmContainersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tmContainersPanelLayout.createSequentialGroup()
                .addComponent(tmContainerDetailsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE))
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tmcontainers_label"), tmContainersPanel); // NOI18N

        tcDefinitionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tcDefinitionsLabel.setText(bundle.getString("tab_desc_tcdefinitions_label")); // NOI18N

        tcDefinitionsScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        tcDefinitionsScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        tcDefinitionsSpaceSystemTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tcDefinitionsSpaceSystemTree.setMinimumSize(new java.awt.Dimension(100, 0));
        tcDefinitionsSpaceSystemTree.setPreferredSize(new java.awt.Dimension(100, 0));
        tcDefinitionsSpaceSystemTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tcDefinitionsSpaceSystemTreeMousePressed(evt);
            }
        });
        tcDefinitionsSpaceSystemTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tcDefinitionsSpaceSystemTreeValueChanged(evt);
            }
        });
        tcDefinitionsScrollPane.setViewportView(tcDefinitionsSpaceSystemTree);

        jSplitPane6.setLeftComponent(tcDefinitionsScrollPane);

        tcTreeScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        tcTreeScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        tcTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tcTree.setMinimumSize(new java.awt.Dimension(100, 0));
        tcTree.setPreferredSize(new java.awt.Dimension(100, 0));
        tcTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tcTreeValueChanged(evt);
            }
        });
        tcTreeScrollPane.setViewportView(tcTree);

        tcSpaceSystemSplitPane.setLeftComponent(tcTreeScrollPane);

        tcContentSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        tcContentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Container Name", "Field Type", "Field Name", "Size", "Start Bit", "Value", "Default Value", "Condition", "Repeat", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tcContentScrollPane.setViewportView(tcContentTable);
        if (tcContentTable.getColumnModel().getColumnCount() > 0) {
            tcContentTable.getColumnModel().getColumn(0).setHeaderValue(bundle.getString("table_telecommands_contname_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(1).setHeaderValue(bundle.getString("table_telecommands_fieldtype_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(2).setHeaderValue(bundle.getString("table_telecommands_itemname_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(3).setMinWidth(65);
            tcContentTable.getColumnModel().getColumn(3).setPreferredWidth(65);
            tcContentTable.getColumnModel().getColumn(3).setMaxWidth(65);
            tcContentTable.getColumnModel().getColumn(3).setHeaderValue(bundle.getString("table_telecommands_size_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(4).setMinWidth(65);
            tcContentTable.getColumnModel().getColumn(4).setPreferredWidth(65);
            tcContentTable.getColumnModel().getColumn(4).setMaxWidth(65);
            tcContentTable.getColumnModel().getColumn(4).setHeaderValue(bundle.getString("table_telecommands_startbit_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(5).setPreferredWidth(75);
            tcContentTable.getColumnModel().getColumn(5).setHeaderValue(bundle.getString("table_telecommands_value_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(6).setPreferredWidth(75);
            tcContentTable.getColumnModel().getColumn(6).setHeaderValue(bundle.getString("table_telecommands_defaultvalue_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(7).setHeaderValue(bundle.getString("table_telecommands_condition_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(8).setHeaderValue(bundle.getString("table_telecommands_repeat_label")); // NOI18N
            tcContentTable.getColumnModel().getColumn(9).setHeaderValue(bundle.getString("table_telecommands_desc_label")); // NOI18N
        }

        tcContentSplitPane.setTopComponent(tcContentScrollPane);
        tcContentSplitPane.setRightComponent(tcContentDrawingScrollPane);

        tcSpaceSystemSplitPane.setRightComponent(tcContentSplitPane);

        jSplitPane6.setRightComponent(tcSpaceSystemSplitPane);

        javax.swing.GroupLayout tcDefinitionsPanelLayout = new javax.swing.GroupLayout(tcDefinitionsPanel);
        tcDefinitionsPanel.setLayout(tcDefinitionsPanelLayout);
        tcDefinitionsPanelLayout.setHorizontalGroup(
            tcDefinitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tcDefinitionsPanelLayout.createSequentialGroup()
                .addComponent(jSplitPane6)
                .addGap(10, 10, 10))
            .addGroup(tcDefinitionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tcDefinitionsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tcDefinitionsPanelLayout.setVerticalGroup(
            tcDefinitionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tcDefinitionsPanelLayout.createSequentialGroup()
                .addComponent(tcDefinitionsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane6)
                .addGap(0, 0, 0))
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tcdefinitions_label"), tcDefinitionsPanel); // NOI18N

        tmStreamDetailsLabel.setText(bundle.getString("tab_desc_tmstreams_label")); // NOI18N

        tmStreamTreeScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        tmStreamTreeScrollPane.setMinimumSize(new java.awt.Dimension(100, 0));
        tmStreamTreeScrollPane.setPreferredSize(new java.awt.Dimension(200, 0));

        tmStreamTree.setMaximumSize(new java.awt.Dimension(32767, 32767));
        tmStreamTree.setMinimumSize(new java.awt.Dimension(100, 0));
        tmStreamTree.setPreferredSize(new java.awt.Dimension(100, 0));
        tmStreamTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tmStreamTreeMousePressed(evt);
            }
        });
        tmStreamTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                tmStreamTreeValueChanged(evt);
            }
        });
        tmStreamTreeScrollPane.setViewportView(tmStreamTree);

        jSplitPane5.setLeftComponent(tmStreamTreeScrollPane);

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jSplitPane5.setRightComponent(jScrollPane1);

        tmStreamContentTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tmStreamContentTreeMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tmStreamContentTree);

        jSplitPane5.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout tmStreamsPanelLayout = new javax.swing.GroupLayout(tmStreamsPanel);
        tmStreamsPanel.setLayout(tmStreamsPanelLayout);
        tmStreamsPanelLayout.setHorizontalGroup(
            tmStreamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tmStreamsPanelLayout.createSequentialGroup()
                .addContainerGap(415, Short.MAX_VALUE)
                .addComponent(tmStreamDetailsLabel)
                .addContainerGap(405, Short.MAX_VALUE))
            .addGroup(tmStreamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tmStreamsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jSplitPane5)
                    .addContainerGap()))
        );
        tmStreamsPanelLayout.setVerticalGroup(
            tmStreamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tmStreamsPanelLayout.createSequentialGroup()
                .addComponent(tmStreamDetailsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(tmStreamsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tmStreamsPanelLayout.createSequentialGroup()
                    .addGap(23, 23, 23)
                    .addComponent(jSplitPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)))
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tmstreams_label"), tmStreamsPanel); // NOI18N

        javax.swing.GroupLayout tmTypesPanelLayout = new javax.swing.GroupLayout(tmTypesPanel);
        tmTypesPanel.setLayout(tmTypesPanelLayout);
        tmTypesPanelLayout.setHorizontalGroup(
            tmTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1003, Short.MAX_VALUE)
        );
        tmTypesPanelLayout.setVerticalGroup(
            tmTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tmtypes_label"), tmTypesPanel); // NOI18N

        javax.swing.GroupLayout tcTypesPanelLayout = new javax.swing.GroupLayout(tcTypesPanel);
        tcTypesPanel.setLayout(tcTypesPanelLayout);
        tcTypesPanelLayout.setHorizontalGroup(
            tcTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1003, Short.MAX_VALUE)
        );
        tcTypesPanelLayout.setVerticalGroup(
            tcTypesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 532, Short.MAX_VALUE)
        );

        mainWindowPrimaryWorkspace.addTab(bundle.getString("tab_tctypes_label"), tcTypesPanel); // NOI18N

        mainWindowMessageScrollingPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        messagesText.setEditable(false);
        messagesText.setColumns(20);
        messagesText.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        messagesText.setRows(5);
        messagesText.setText(bundle.getString("no_messages_text")); // NOI18N
        mainWindowMessageScrollingPane.setViewportView(messagesText);

        messagesOutputLabel.setText("Messages");

        mainWindowFileMenu.setText(bundle.getString("file_menu_label")); // NOI18N

        mainWindowOpenFileMenuItem.setText(bundle.getString("file_menu_open_database_label")); // NOI18N
        mainWindowOpenFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowOpenFileMenuItemActionPerformed(evt);
            }
        });
        mainWindowFileMenu.add(mainWindowOpenFileMenuItem);

        mainWindowOpenRecentMenu.setText(bundle.getString("file_menu_open_recent_database_label")); // NOI18N
        mainWindowFileMenu.add(mainWindowOpenRecentMenu);

        mainWindowOpenExampleMenu.setText(bundle.getString("file_menu_open_example_label")); // NOI18N
        mainWindowFileMenu.add(mainWindowOpenExampleMenu);

        mainWindowSaveFileMenuItem.setText(bundle.getString("file_menu_save_database_label")); // NOI18N
        mainWindowSaveFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowSaveFileMenuItemActionPerformed(evt);
            }
        });
        mainWindowFileMenu.add(mainWindowSaveFileMenuItem);

        mainWindowCloseFileMenuItem.setText(bundle.getString("file_menu_close_database_label")); // NOI18N
        mainWindowCloseFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowCloseFileMenuItemActionPerformed(evt);
            }
        });
        mainWindowFileMenu.add(mainWindowCloseFileMenuItem);

        mainWindowCreateFileMenuItem.setText(bundle.getString("file_menu_create_database_label")); // NOI18N
        mainWindowCreateFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowCreateFileMenuItemActionPerformed(evt);
            }
        });
        mainWindowFileMenu.add(mainWindowCreateFileMenuItem);

        mainWindowExitMenuItem.setText(bundle.getString("file_menu_exit_label")); // NOI18N
        mainWindowExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowExitMenuItemActionPerformed(evt);
            }
        });
        mainWindowFileMenu.add(mainWindowExitMenuItem);

        mainWindowMenuBar.add(mainWindowFileMenu);

        mainWindowEditMenu.setText(bundle.getString("edit_menu_label")); // NOI18N

        mainWindowClearMessagesMenuItem.setText(bundle.getString("edit_menu_clear_messages_label")); // NOI18N
        mainWindowClearMessagesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowClearMessagesMenuItemActionPerformed(evt);
            }
        });
        mainWindowEditMenu.add(mainWindowClearMessagesMenuItem);

        mainWindowMenuBar.add(mainWindowEditMenu);

        mainWindowFindMenu.setText(bundle.getString("find_menu_label")); // NOI18N

        mainWindowFindSpaceSystemMenuItem.setText(bundle.getString("find_menu_spacesystem_label")); // NOI18N
        mainWindowFindSpaceSystemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowFindSpaceSystemMenuItemActionPerformed(evt);
            }
        });
        mainWindowFindMenu.add(mainWindowFindSpaceSystemMenuItem);

        mainWindowFindParameterMenuItem.setText(bundle.getString("find_menu_parameters_label")); // NOI18N
        mainWindowFindParameterMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowFindParameterMenuItemActionPerformed(evt);
            }
        });
        mainWindowFindMenu.add(mainWindowFindParameterMenuItem);

        mainWindowFindContainerMenuItem.setText(bundle.getString("find_menu_containers_label")); // NOI18N
        mainWindowFindContainerMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowFindContainerMenuItemActionPerformed(evt);
            }
        });
        mainWindowFindMenu.add(mainWindowFindContainerMenuItem);

        mainWindowFindTelecommandMenuItem.setText(bundle.getString("general_telecommand")); // NOI18N
        mainWindowFindTelecommandMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowFindTelecommandMenuItemActionPerformed(evt);
            }
        });
        mainWindowFindMenu.add(mainWindowFindTelecommandMenuItem);

        mainWindowFindByXPathMenuItem.setText(bundle.getString("find_menu_xpath_label")); // NOI18N
        mainWindowFindByXPathMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowFindByXPathMenuItemActionPerformed(evt);
            }
        });
        mainWindowFindMenu.add(mainWindowFindByXPathMenuItem);

        mainWindowMenuBar.add(mainWindowFindMenu);

        mainWindowShowMenu.setText(bundle.getString("show_menu_label")); // NOI18N

        mainWindowExpandAllSpaceSystemTreeMenuItem.setText(bundle.getString("show_menu_expand_label")); // NOI18N
        mainWindowExpandAllSpaceSystemTreeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowExpandAllSpaceSystemTreeMenuItemActionPerformed(evt);
            }
        });
        mainWindowShowMenu.add(mainWindowExpandAllSpaceSystemTreeMenuItem);

        mainWindowExpandContainerTreeMenuItem.setText(bundle.getString("show_menu_expand_container_tree_label")); // NOI18N
        mainWindowExpandContainerTreeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowExpandContainerTreeMenuItemActionPerformed(evt);
            }
        });
        mainWindowShowMenu.add(mainWindowExpandContainerTreeMenuItem);

        mainWindowMessagesDialogMenuItem.setText(bundle.getString("show_menu_messages_label")); // NOI18N
        mainWindowMessagesDialogMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowMessagesDialogMenuItemActionPerformed(evt);
            }
        });
        mainWindowShowMenu.add(mainWindowMessagesDialogMenuItem);

        mainWindowShowMetricsMenuItem.setText(bundle.getString("show_menu_metrics_label")); // NOI18N
        mainWindowShowMetricsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowShowMetricsMenuItemActionPerformed(evt);
            }
        });
        mainWindowShowMenu.add(mainWindowShowMetricsMenuItem);

        mainWindowMenuBar.add(mainWindowShowMenu);

        mainWindowExportMenu.setText(bundle.getString("export_menu_label")); // NOI18N

        mainWindowExportParametersMenuItem.setText(bundle.getString("export_menu_parameters_label")); // NOI18N
        mainWindowExportParametersMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowExportParametersMenuItemActionPerformed(evt);
            }
        });
        mainWindowExportMenu.add(mainWindowExportParametersMenuItem);

        mainWindowMenuBar.add(mainWindowExportMenu);

        mainWindowOptionsMenu.setText(bundle.getString("options_menu_label")); // NOI18N

        mainWindowValidateOnLoadMenuItem.setSelected(prefs.getValidateOnLoadOption());
        mainWindowValidateOnLoadMenuItem.setText(bundle.getString("options_menu_validate_schema_label")); // NOI18N
        mainWindowValidateOnLoadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowValidateOnLoadMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowValidateOnLoadMenuItem);

        mainWindowShowAliasNamespaceMenuItem.setSelected(prefs.getShowAliasNamespacesOption());
        mainWindowShowAliasNamespaceMenuItem.setText(bundle.getString("options_menu_show_alias_namespaces_label")); // NOI18N
        mainWindowShowAliasNamespaceMenuItem.setToolTipText("");
        mainWindowShowAliasNamespaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowShowAliasNamespaceMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowShowAliasNamespaceMenuItem);

        mainWindowPreferredNamespaceMenuItem.setText(bundle.getString("options_menu_set_preferred_namespace_label")); // NOI18N
        mainWindowPreferredNamespaceMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowPreferredNamespaceMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowPreferredNamespaceMenuItem);

        mainWindowRecentFilesMaxMenuItem.setText(bundle.getString("options_menu_set_recent_files_max_label")); // NOI18N
        mainWindowRecentFilesMaxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowRecentFilesMaxMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowRecentFilesMaxMenuItem);

        mainWindowClearRecentFilesMenuItem.setText(bundle.getString("options_menu_clear_recent_files_label")); // NOI18N
        mainWindowClearRecentFilesMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowClearRecentFilesMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowClearRecentFilesMenuItem);

        mainWindowUseXincludeMenuItem.setSelected(prefs.getUseXIncludeOption());
        mainWindowUseXincludeMenuItem.setText(bundle.getString("file_chooser_xinclude_text")); // NOI18N
        mainWindowUseXincludeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowUseXincludeMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowUseXincludeMenuItem);

        mainWindowLocaleMenuItem.setText(bundle.getString("options_menu_locale_label")); // NOI18N
        mainWindowLocaleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowLocaleMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowLocaleMenuItem);

        mainWindowShowAllConditionalsMenuItem.setSelected(prefs.getShowAllContainerConditionalsOption());
        mainWindowShowAllConditionalsMenuItem.setText(bundle.getString("options_menu_container_conditionals_label")); // NOI18N
        mainWindowShowAllConditionalsMenuItem.setToolTipText("");
        mainWindowShowAllConditionalsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowShowAllConditionalsMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowShowAllConditionalsMenuItem);

        containerDrawingOrientationMenu.setText(bundle.getString("options_menu_container_drawing_orient_label")); // NOI18N

        containerDrawingLeftToRight.setSelected(( prefs.getContainerOrientationOption().equals( "LEFT_TO_RIGHT" ) ));
        containerDrawingLeftToRight.setText(bundle.getString("options_menu_container_drawing_l2r_label")); // NOI18N
        containerDrawingLeftToRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containerDrawingLeftToRightActionPerformed(evt);
            }
        });
        containerDrawingOrientationMenu.add(containerDrawingLeftToRight);

        containerDrawingTopToBottom.setSelected(( prefs.getContainerOrientationOption().equals( "TOP_TO_BOTTOM" ) ));
        containerDrawingTopToBottom.setText(bundle.getString("options_menu_container_drawing_t2b_label")); // NOI18N
        containerDrawingTopToBottom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                containerDrawingTopToBottomActionPerformed(evt);
            }
        });
        containerDrawingOrientationMenu.add(containerDrawingTopToBottom);

        mainWindowOptionsMenu.add(containerDrawingOrientationMenu);

        mainWindowEditDocumentMenuItem.setText(bundle.getString("options_menu_edit_document_label")); // NOI18N
        mainWindowEditDocumentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowEditDocumentMenuItemActionPerformed(evt);
            }
        });
        mainWindowOptionsMenu.add(mainWindowEditDocumentMenuItem);

        mainWindowMenuBar.add(mainWindowOptionsMenu);

        mainWindowHelpMenu.setText(bundle.getString("help_menu_label")); // NOI18N

        mainWindowHelpSchemaMenuItem.setText(bundle.getString("help_menu_schema")); // NOI18N
        mainWindowHelpSchemaMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowHelpSchemaMenuItemActionPerformed(evt);
            }
        });
        mainWindowHelpMenu.add(mainWindowHelpSchemaMenuItem);

        mainWindowHelpApiMenuItem.setText(bundle.getString("help_menu_toolkit")); // NOI18N
        mainWindowHelpApiMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowHelpApiMenuItemActionPerformed(evt);
            }
        });
        mainWindowHelpMenu.add(mainWindowHelpApiMenuItem);

        mainWindowHelpToolMenuItem.setText(bundle.getString("help_menu_tool")); // NOI18N
        mainWindowHelpToolMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowHelpToolMenuItemActionPerformed(evt);
            }
        });
        mainWindowHelpMenu.add(mainWindowHelpToolMenuItem);

        mainWindowHelpCurrentMenuItem.setText(bundle.getString("help_menu_current")); // NOI18N
        mainWindowHelpCurrentMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowHelpCurrentMenuItemActionPerformed(evt);
            }
        });
        mainWindowHelpMenu.add(mainWindowHelpCurrentMenuItem);

        mainWindowHelpAboutMenuItem.setText(bundle.getString("help_menu_about")); // NOI18N
        mainWindowHelpAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainWindowHelpAboutMenuItemActionPerformed(evt);
            }
        });
        mainWindowHelpMenu.add(mainWindowHelpAboutMenuItem);

        mainWindowMenuBar.add(mainWindowHelpMenu);

        setJMenuBar(mainWindowMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainWindowMessageScrollingPane)
            .addComponent(loadedFilenameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(messagesOutputLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(loadedSchemaLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mainWindowPrimaryWorkspace)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(loadedFilenameLabel)
                .addGap(2, 2, 2)
                .addComponent(loadedSchemaLabel)
                .addGap(1, 1, 1)
                .addComponent(mainWindowPrimaryWorkspace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(messagesOutputLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainWindowMessageScrollingPane, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        messagesOutputLabel.getAccessibleContext().setAccessibleName(bundle.getString("messages_label")); // NOI18N

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mainWindowOpenFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowOpenFileMenuItemActionPerformed

        XTCEViewerOpenFileChooser chs = new XTCEViewerOpenFileChooser( prefs );

        int status = chs.showOpenDialog( this );

        if (status == JFileChooser.APPROVE_OPTION) {
           openFile( chs.getSelectedFile(),
                     chs.isXIncludeSelected(),
                     chs.isValidateSelected() );
        }

    }//GEN-LAST:event_mainWindowOpenFileMenuItemActionPerformed

    private void mainWindowExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowExitMenuItemActionPerformed

        dispatchEvent( new WindowEvent(this, WindowEvent.WINDOW_CLOSING) );

    }//GEN-LAST:event_mainWindowExitMenuItemActionPerformed

    private void mainWindowCloseFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowCloseFileMenuItemActionPerformed

        if ( xtceDatabaseFile == null ) {
            JOptionPane.showMessageDialog( this,
                                           XTCEFunctions.getText( "dialog_nodatabasetoclose_text" ), // NOI18N
                                           XTCEFunctions.getText( "dialog_insignificanterror_title_text" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
            return;
        } else if ( xtceDatabaseFile.getChanged() == true ) {
            int response = JOptionPane.showConfirmDialog( this,
                                                          XTCEFunctions.getText( "dialog_fileisopenchanged_text" ) + "\n" + // NOI18N
                                                          XTCEFunctions.getText( "dialog_savefilequestion_text" ), // NOI18N
                                                          XTCEFunctions.getText( "dialog_closeconfirmation_text" ), // NOI18N
                                                          JOptionPane.YES_NO_OPTION );
            if ( response == JOptionPane.YES_OPTION ) {
                mainWindowSaveFileMenuItemActionPerformed( evt );
                if ( xtceDatabaseFile.getChanged() == true ) {
                    return;
                }
            }
        }

        if ( xpathDialog != null ) {
            xpathDialog.dispatchEvent( new WindowEvent( xpathDialog, WindowEvent.WINDOW_CLOSING ) );
            xpathDialog = null;
        }

        if ( findParameterDialog != null ) {
            findParameterDialog.dispatchEvent( new WindowEvent( findParameterDialog, WindowEvent.WINDOW_CLOSING ) );
            findParameterDialog = null;
        }

        if ( parameterUsageDialog != null ) {
            parameterUsageDialog.dispatchEvent( new WindowEvent( parameterUsageDialog, WindowEvent.WINDOW_CLOSING ) );
            parameterUsageDialog = null;
        }

        xtceDatabaseFile = null;
        resetAllDisplays();
        detailSpaceSystemPanelScrollPane.setViewportView( null );

        mainWindowClearMessagesMenuItemActionPerformed( evt );
        loadedFilenameLabel.setText( XTCEFunctions.getText( "openfile_default_text_label" ) ); // NOI18N
        loadedSchemaLabel.setText( XTCEFunctions.getText( "openfile_default_schema_label" ) ); // NOI18N

        System.gc();

    }//GEN-LAST:event_mainWindowCloseFileMenuItemActionPerformed

    private void mainWindowClearMessagesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowClearMessagesMenuItemActionPerformed

        messagesText.setText( XTCEFunctions.getText( "no_messages_text" ) ); // NOI18N

    }//GEN-LAST:event_mainWindowClearMessagesMenuItemActionPerformed

    private void mainWindowValidateOnLoadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowValidateOnLoadMenuItemActionPerformed

        prefs.setValidateOnLoadOption( mainWindowValidateOnLoadMenuItem.getState() );

    }//GEN-LAST:event_mainWindowValidateOnLoadMenuItemActionPerformed

    private void detailSpaceSystemTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detailSpaceSystemTreeMousePressed

        if ( SwingUtilities.isRightMouseButton( evt ) == true ) {
            if ( xtceDatabaseFile != null ) {
               spaceSystemDetailPopupMenu.show( detailSpaceSystemTree, evt.getX(), evt.getY() );
            }
        }

    }//GEN-LAST:event_detailSpaceSystemTreeMousePressed

    private void tmParameterSpaceSystemTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmParameterSpaceSystemTreeMousePressed

        if ( SwingUtilities.isLeftMouseButton( evt ) == true ) {
           //drawTelemetryParameterTable();
        }

    }//GEN-LAST:event_tmParameterSpaceSystemTreeMousePressed

    private void tcParameterSpaceSystemTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tcParameterSpaceSystemTreeMousePressed

        if ( SwingUtilities.isLeftMouseButton( evt ) == true ) {
           //drawTelecommandParameterTable();
        }

    }//GEN-LAST:event_tcParameterSpaceSystemTreeMousePressed

    private void tmContainerTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmContainerTreeMousePressed

        if ( SwingUtilities.isRightMouseButton( evt ) == true ) {
            containerDetailPopupMenu.show( tmContainerTree,
                                           evt.getX(),
                                           evt.getY() );
        }

    }//GEN-LAST:event_tmContainerTreeMousePressed

    private void mainWindowSaveFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowSaveFileMenuItemActionPerformed

        if ( xtceDatabaseFile == null ) {
            JOptionPane.showMessageDialog( this,
                                           XTCEFunctions.getText( "dialog_nofileopentosave_text" ), // NOI18N
                                           XTCEFunctions.getText( "general_error" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
            return;
        }

        JFileChooser chooser = new JFileChooser( "." );
        FileFilter fileFilter =
            new FileNameExtensionFilter( XTCEFunctions.getText( "file_chooser_xtcexml_text" ), // NOI18N
                                         "xml" ); // NOI18N
        chooser.addChoosableFileFilter( fileFilter );
        chooser.setFileFilter( fileFilter );

        if ( xtceDatabaseFile.getFilename().getName().isEmpty() == false ) {
            chooser.setSelectedFile( xtceDatabaseFile.getFilename() );
        } else if ( prefs.getCurrentWorkingDirectory().isEmpty() == false ) {
            chooser.setCurrentDirectory( new File( prefs.getCurrentWorkingDirectory() ) );
        }

        int status = chooser.showSaveDialog( this );
        if (status == JFileChooser.APPROVE_OPTION) {

            File dbFile = chooser.getSelectedFile();
            if ( ( dbFile.getName().endsWith( ".xml" ) == false ) && // NOI18N
                 ( dbFile.getName().contains( "." )    == false ) ) { // NOI18N
                dbFile = new File ( dbFile.getAbsolutePath() + ".xml" ); // NOI18N
                while ( dbFile.exists() == true ) {
                    dbFile = new File( dbFile.getAbsolutePath() + "-new.xml" ); // NOI18N
                }
            }

            try {

                long startTime = System.currentTimeMillis();
                xtceDatabaseFile.saveDatabase( dbFile );

                prefs.updateRecentFilesList( mainWindowOpenRecentMenu, dbFile );

                if ( dbFile.getParent() != null ) {
                    prefs.setCurrentWorkingDirectory( dbFile.getParent() );
                }

                long estimatedTime = System.currentTimeMillis() - startTime;
                logMsg( "Saved file in approximately " + Long.toString( estimatedTime / 1000 ) + " seconds" );
                loadedFilenameLabel.setText( dbFile.getAbsolutePath() );

            } catch ( XTCEDatabaseException ex ) {

                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "file_save_error_message" ) + // NOI18N
                        " " +
                        dbFile.getAbsolutePath() );
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        ex.getLocalizedMessage() );

            }

        }

    }//GEN-LAST:event_mainWindowSaveFileMenuItemActionPerformed

    private void mainWindowShowAliasNamespaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowShowAliasNamespaceMenuItemActionPerformed

        prefs.setShowAliasNamespacesOption( mainWindowShowAliasNamespaceMenuItem.getState() );

        drawTelemetryParameterTable();
        drawTelecommandParameterTable();
        drawTelecommandTree();

        XTCEViewerContainerTreeNode node =
            (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();

        if ( node != null) {
            XTCEContainerContentModel model = node.getContentModel();
            if ( model != null ) {
                List<XTCEContainerEntryValue> values = model.getUserValues();
                drawContainerContentTable( values );
            } else {
                drawContainerContentTable( null );
            }
        }

    }//GEN-LAST:event_mainWindowShowAliasNamespaceMenuItemActionPerformed

    private void mainWindowPreferredNamespaceMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowPreferredNamespaceMenuItemActionPerformed

        XTCEViewerAliasNamespaceDialog dialog = new XTCEViewerAliasNamespaceDialog( this, true );
        dialog.setShowAll( prefs.getShowAllAliasNamespacesOption() );
        dialog.setPreferredNamespace( prefs.getPreferredAliasNamespaceOption() );
        dialog.setupFieldStates();
        dialog.setVisible( true );
        if ( dialog.getModified() == true ) {
            prefs.setShowAllAliasNamespacesOption( dialog.getShowAll() );
            prefs.setPreferredAliasNamespaceOption( dialog.getPreferredNamespace() );
            drawTelemetryParameterTable();
            drawTelecommandParameterTable();
            drawTelecommandTree();
            XTCEViewerContainerTreeNode node =
                (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
            if ( node != null) {
                XTCEContainerContentModel model = node.getContentModel();
                if ( model != null ) {
                    List<XTCEContainerEntryValue> values = model.getUserValues();
                    drawContainerContentTable( values );
                } else {
                    drawContainerContentTable( null );
                }
            }
        }

    }//GEN-LAST:event_mainWindowPreferredNamespaceMenuItemActionPerformed

    private void mainWindowCreateFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowCreateFileMenuItemActionPerformed

        // in the event that a file is already open, we should attempt to
        // close the file before creating a new database.

        if ( xtceDatabaseFile != null ) {
            mainWindowCloseFileMenuItemActionPerformed( evt );
        }

        // this extra test captures the case where a file is open and the user
        // chose to cancel the save and close, leaving the original file open.

        if ( xtceDatabaseFile != null ) {
            return;
        }

        // the following dialog allows the user to create a new SpaceSystem or
        // just cancel, and in that case is it "not accepted", so we just
        // return and do nothing.

        XTCEViewerCreateEditSpaceSystem dialog =
            new XTCEViewerCreateEditSpaceSystem( this, true, null );
        dialog.setVisible( true );
        if ( dialog.isAccepted() == false ) {
            return;
        }

        // Create the new minimum SpaceSystem element with an empty file as it
        // has not yet been saved.

        try {
            xtceDatabaseFile = new XTCEDatabase( dialog.getSpaceSystemName() );
            loadedFilenameLabel.setText( dialog.getSpaceSystemName() );
            loadedSchemaLabel.setText( XTCEFunctions.getText( "openfile_default_schema_label" ) ); // NOI18N
            XTCESpaceSystem ss = xtceDatabaseFile.getRootSpaceSystem();
            ss.setShortDescription( dialog.getShortDescription() );
            ss.setLongDescription( dialog.getLongDescription() );
            ss.setOperationalStatus( dialog.getOperationalStatus() );
            ss.setHeaderAttributes( dialog.getVersion(),
                                    dialog.getDate(),
                                    dialog.getClassification(),
                                    dialog.getClassificationInstructions(),
                                    dialog.getValidationStatus() );
            buildSpaceSystemTrees();
            logMsg( XTCEFunctions.getText( "file_create_message" ) + // NOI18N
                    dialog.getSpaceSystemName() );
        } catch ( XTCEDatabaseException ex ) {
            logMsg( XTCEFunctions.getText( "file_create_error_message" ) + // NOI18N
                    ex.getLocalizedMessage() );
        }

    }//GEN-LAST:event_mainWindowCreateFileMenuItemActionPerformed

    private void addSpaceSystemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSpaceSystemMenuItemActionPerformed

        XTCEViewerSpaceSystemTreeNode node =
            (XTCEViewerSpaceSystemTreeNode)detailSpaceSystemTree.getLastSelectedPathComponent();
        if ( node == null ) {
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "dialog_nospacesystemtoadd_text" )); // NOI18N
            return;
        }

        XTCEViewerCreateEditSpaceSystem dialog =
            new XTCEViewerCreateEditSpaceSystem( this, true, null );
        dialog.setVisible( true );

        if ( dialog.isAccepted() == true ) {

            try {
                String path = node.getFullPath() + "/" + dialog.getSpaceSystemName();
                xtceDatabaseFile.addSpaceSystem( dialog.getSpaceSystemName(),
                                                 node.getFullPath() );
                XTCESpaceSystem ss = xtceDatabaseFile.getSpaceSystem( path );
                ss.setShortDescription( dialog.getShortDescription() );
                ss.setLongDescription( dialog.getLongDescription() );
                ss.setOperationalStatus( dialog.getOperationalStatus() );
                ss.setHeaderAttributes( dialog.getVersion(),
                                        dialog.getDate(),
                                        dialog.getClassification(),
                                        dialog.getClassificationInstructions(),
                                        dialog.getValidationStatus() );
                resetAllDisplays();
                logMsg( XTCEFunctions.getText( "dialog_addedspacesystem_text" ) + // NOI18N
                        ": " + // NOI18N
                        node.getFullPath() +
                        "/" + // NOI18N
                        dialog.getSpaceSystemName() );
            } catch ( XTCEDatabaseException ex ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "dialog_failedtoaddspacesystem_text" ) + // NOI18N
                        ": " + // NOI18N
                        ex.getLocalizedMessage() );
            }

        }

    }//GEN-LAST:event_addSpaceSystemMenuItemActionPerformed

    private void deleteSpaceSystemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSpaceSystemMenuItemActionPerformed

        XTCEViewerSpaceSystemTreeNode node =
            (XTCEViewerSpaceSystemTreeNode)detailSpaceSystemTree.getLastSelectedPathComponent();
        if ( node == null ) {
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "dialog_nospacesystemtodelete_text" ) ); // NOI18N
            return;
        }

        int response = JOptionPane.showConfirmDialog( this,
                                                      XTCEFunctions.getText( "dialog_confirmdelete_yoursure_text" ), // NOI18N
                                                      XTCEFunctions.getText( "dialog_confirmdelete_spacesystem_text" ), // NOI18N
                                                      JOptionPane.YES_NO_OPTION );
        if ( response == JOptionPane.YES_OPTION ) {
            try {
                xtceDatabaseFile.deleteSpaceSystem( node.getFullPath() );
                resetAllDisplays();
                logMsg( XTCEFunctions.getText( "spacesystem_remove_message" ) + // NOI18N
                        " " +
                        node.getFullPath() );
            } catch ( XTCEDatabaseException ex ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "spacesystem_remove_error_message" ) + // NOI18N
                        " " + // NOI18N
                        ex.getLocalizedMessage() );
            }
        }

    }//GEN-LAST:event_deleteSpaceSystemMenuItemActionPerformed

    private void tmParametersTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmParametersTableMousePressed

        if ( fileOpenWarning() == true ) return;

        XTCEViewerFunctions.showRightClickTableMenu( evt,
                                                     tmParametersTable,
                                                     parameterDetailPopupMenu );

    }//GEN-LAST:event_tmParametersTableMousePressed

    private void tcParametersTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tcParametersTableMousePressed

        if ( fileOpenWarning() == true ) return;

        XTCEViewerFunctions.showRightClickTableMenu( evt,
                                                     tcParametersTable,
                                                     parameterDetailPopupMenu );

    }//GEN-LAST:event_tcParametersTableMousePressed

    private void showXmlElementsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showXmlElementsMenuItemActionPerformed

        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();
        int row = -1;
        if ( idx == 1 ) { // telemetry parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tmParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tm_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tmParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tmParametersTable.getValueAt( row, 0 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelemetryParameter( pname );
                    XTCEViewerParameterXmlDialog dialog = new XTCEViewerParameterXmlDialog( this, true, parameter );
                    dialog.setVisible( true );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        } else if ( idx == 2 ) { // telecommand parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tcParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tc_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tcParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tcParametersTable.getValueAt( row, 0 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelecommandParameter( pname );
                    XTCEViewerParameterXmlDialog dialog = new XTCEViewerParameterXmlDialog( this, true, parameter );
                    dialog.setVisible( true );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        } else if ( idx == 3 ) {
            XTCEViewerContainerTreeNode node =
                (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tm_container_error_message" ) ); // NOI18N
                return;
            }
            row = tmContainerTable.getSelectedRow();
            if ( row != -1 ) {
                try {
                    if ( node.getContentModel().getContentList().get( row ).getEntryType() == FieldType.CONTAINER ) {
                        XTCETMContainer container = node.getContentModel().getContentList().get( row ).getTelemetryContainer();
                        XTCEViewerContainerXmlDialog dialog = new XTCEViewerContainerXmlDialog( this, true, container );
                        dialog.setVisible( true );
                    } else if ( node.getContentModel().getContentList().get( row ).getEntryType() == FieldType.PARAMETER ) {
                        XTCEParameter parameter = node.getContentModel().getContentList().get( row ).getParameter();
                        XTCEViewerParameterXmlDialog dialog = new XTCEViewerParameterXmlDialog( this, true, parameter );
                        dialog.setVisible( true );
                    } else {
                        logMsg( XTCEFunctions.generalErrorPrefix() +
                                XTCEFunctions.getText( "rightclick_container_table_error_message" ) ); // NOI18N
                    }
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                } catch ( NullPointerException ex ) {
                    JOptionPane.showMessageDialog( this,
                                                   XTCEFunctions.getText( "rightclick_container_table_null_error_message" ), // NOI18N
                                                   XTCEFunctions.getText( "general_error" ), // NOI18N
                                                   JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }//GEN-LAST:event_showXmlElementsMenuItemActionPerformed

    private void showParameterDetailsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showParameterDetailsMenuItemActionPerformed

        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();
        int row = -1;
        if ( idx == 1 ) { // telemetry parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tmParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tm_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tmParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tmParametersTable.getValueAt( row, 0 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelemetryParameter( pname );
                    XTCEViewerParameterDetailDialog dialog = new XTCEViewerParameterDetailDialog( this, true, parameter );
                    dialog.setVisible( true );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        } else if ( idx == 2 ) { // telecommand parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tcParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tc_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tcParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tcParametersTable.getValueAt( row, 0 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelecommandParameter( pname );
                    XTCEViewerParameterDetailDialog dialog = new XTCEViewerParameterDetailDialog( this, true, parameter );
                    dialog.setVisible( true );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        } else if ( idx == 3 ) {
            XTCEViewerContainerTreeNode node =
                (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tm_container_error_message" ) ); // NOI18N
                return;
            }
            row = tmContainerTable.getSelectedRow();
            if ( row != -1 ) {
                try {
                    XTCEParameter parameter = node.getContentModel().getContentList().get( row ).getParameter();
                    XTCEViewerParameterDetailDialog dialog = new XTCEViewerParameterDetailDialog( this, true, parameter );
                    dialog.setVisible( true );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                } catch ( NullPointerException ex ) {
                    JOptionPane.showMessageDialog( this,
                                                   XTCEFunctions.getText( "rightclick_container_table_null_error_message" ), // NOI18N
                                                   XTCEFunctions.getText( "general_error" ), // NOI18N
                                                   JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }//GEN-LAST:event_showParameterDetailsMenuItemActionPerformed

    private void mainWindowFindSpaceSystemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowFindSpaceSystemMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        String name = JOptionPane.showInputDialog( this,
                                                   XTCEFunctions.getText( "ss_name_text" ) ); // NOI18N
        if ( name == null ) {
            return;
        }

        JTree tree = getCurrentSpaceSystemTree();
        if ( tree == null ) {
            return;
        }

        if ( XTCEViewerFunctions.selectSpaceSystemFromTree( tree, name, true ) == true ) {
            return;
        }

        JOptionPane.showMessageDialog( this,
                                       XTCEFunctions.getText( "dialog_nolocatespacesystem_text" ) + ":\n" + name, // NOI18N
                                       XTCEFunctions.getText( "general_error" ), // NOI18N
                                       JOptionPane.ERROR_MESSAGE);

    }//GEN-LAST:event_mainWindowFindSpaceSystemMenuItemActionPerformed

    private void mainWindowFindParameterMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowFindParameterMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        if ( findParameterDialog == null ) {
            findParameterDialog = new XTCEViewerParameterFindDialog( this,
                                                                     prefs,
                                                                     xtceDatabaseFile );
        } else {
            findParameterDialog.setVisible( true );
            findParameterDialog.toFront();
        }

    }//GEN-LAST:event_mainWindowFindParameterMenuItemActionPerformed

    private void tmParameterSpaceSystemTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tmParameterSpaceSystemTreeValueChanged

        drawTelemetryParameterTable();

    }//GEN-LAST:event_tmParameterSpaceSystemTreeValueChanged

    private void tcParameterSpaceSystemTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tcParameterSpaceSystemTreeValueChanged

        drawTelecommandParameterTable();

    }//GEN-LAST:event_tcParameterSpaceSystemTreeValueChanged

    private void tmContainerTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tmContainerTreeValueChanged

        drawContainerContentTable( null );

    }//GEN-LAST:event_tmContainerTreeValueChanged

    private void mainWindowExpandAllSpaceSystemTreeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowExpandAllSpaceSystemTreeMenuItemActionPerformed

        XTCEViewerFunctions.expandAllTreeNodes( getCurrentSpaceSystemTree() );

    }//GEN-LAST:event_mainWindowExpandAllSpaceSystemTreeMenuItemActionPerformed

    private void mainWindowExportParametersMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowExportParametersMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        int value = JOptionPane.showConfirmDialog( this,
                                                   parameterExportPanel,
                                                   XTCEFunctions.getText( "dialog_exportparameters_text" ), // NOI18N
                                                   JOptionPane.OK_CANCEL_OPTION );
        if ( value == JOptionPane.CANCEL_OPTION ) {
            return;
        }

        String fileExtensionDescription = XTCEFunctions.getText( "file_chooser_csv_text" ); // NOI18N
        String fileExtensionPattern     = "csv"; // NOI18N
        if ( exportParametersCppRadioButton.isSelected() == true ) {
            fileExtensionDescription = XTCEFunctions.getText( "file_chooser_cpp_text" ); // NOI18N
            fileExtensionPattern     = "h"; // NOI18N
        } else if ( exportParametersCometRadioButton.isSelected() == true ) {
            fileExtensionDescription = XTCEFunctions.getText( "file_chooser_oscomet_text" ); // NOI18N
            fileExtensionPattern     = "def"; // NOI18N
        } else if ( exportParametersInControlRadioButton.isSelected() == true ) {
            fileExtensionDescription = XTCEFunctions.getText( "file_chooser_incontrol_text" ); // NOI18N
            fileExtensionPattern     = "xml"; // NOI18N
        }
        JFileChooser chooser = new JFileChooser( "." ); // NOI18N
        FileFilter fileFilter = new FileNameExtensionFilter( fileExtensionDescription,
                                                             fileExtensionPattern );
        chooser.addChoosableFileFilter( fileFilter );
        chooser.setFileFilter( fileFilter );
        int status = chooser.showSaveDialog( this );
        if (status == JFileChooser.APPROVE_OPTION) {
            File exportFile = chooser.getSelectedFile();
            if ( exportParametersCsvRadioButton.isSelected() == true ) {
                if ( exportFile.getName().endsWith( ".csv" ) == false ) { // NOI18N
                    exportFile = new File( exportFile.getAbsolutePath() + ".csv" ); // NOI18N
                }
            } else if ( exportParametersCppRadioButton.isSelected() == true ) {
                if ( exportFile.getName().endsWith( ".h" ) == false ) { // NOI18N
                    exportFile = new File( exportFile.getAbsolutePath() + ".h" ); // NOI18N
                }
            } else if ( exportParametersCometRadioButton.isSelected() == true ) {
                if ( exportFile.getName().endsWith( ".def" ) == false ) { // NOI18N
                    exportFile = new File( exportFile.getAbsolutePath() + ".def" ); // NOI18N
                }
            } else if ( exportParametersInControlRadioButton.isSelected() == true ) {
                if ( exportFile.getName().endsWith( ".xml" ) == false ) { // NOI18N
                    exportFile = new File( exportFile.getAbsolutePath() + ".xml" ); // NOI18N
                }
            }
            logMsg( "Exporting " + fileExtensionDescription + " to file " + exportFile.getName() );
            Properties configProperties = new Properties();
            configProperties.setProperty( "file_extension_description", fileExtensionDescription ); // NOI18N
            configProperties.setProperty( "file_extension_pattern", fileExtensionPattern ); // NOI18N
            configProperties.setProperty( "use_header_row", ( exportParametersIncludeHeaderRowCheckbox.isSelected() == true ? "true" : "false" ) ); // NOI18N
            configProperties.setProperty( "use_namespaces", ( exportParametersUseNamespacesCheckbox.isSelected() == true ? "true" : "false" ) ); // NOI18N
            try {
                XTCEDatabaseExporter dbExport = null;
                if ( exportParametersCsvRadioButton.isSelected() == true ) {
                    dbExport = new XTCEDatabaseExporterCsv( xtceDatabaseFile, configProperties );
                    dbExport.exportParameters( exportFile );
                } else if ( exportParametersCppRadioButton.isSelected() == true ) {
                    logMsg( XTCEFunctions.getText( "general_warning" ) + // NOI18N
                            XTCEFunctions.getText( "dialog_export_notyetimplemented_text" ) + // NOI18N
                            " " + // NOI18N
                            fileExtensionDescription );
                } else if ( exportParametersCometRadioButton.isSelected() == true ) {
                    logMsg( XTCEFunctions.getText( "general_warning" ) + // NOI18N
                            XTCEFunctions.getText( "dialog_export_notyetimplemented_text" ) + // NOI18N
                            " " + // NOI18N
                            fileExtensionDescription );
                } else if ( exportParametersInControlRadioButton.isSelected() == true ) {
                    logMsg( XTCEFunctions.getText( "general_warning" ) + // NOI18N
                            XTCEFunctions.getText( "dialog_export_notyetimplemented_text" ) + // NOI18N
                            " " + // NOI18N
                            fileExtensionDescription );
                }
            } catch ( XTCEDatabaseException ex ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "dialog_export_exporting_text" ) + // NOI18N
                        " " + // NOI18N
                        fileExtensionDescription +
                        ": " + // NOI18N
                        ex.getLocalizedMessage() );
            }
        }

    }//GEN-LAST:event_mainWindowExportParametersMenuItemActionPerformed

    private void mainWindowMessagesDialogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowMessagesDialogMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        Object[] selectionValues = { XTCEFunctions.getText( "general_save_text" ), // NOI18N
                                     XTCEFunctions.getText( "general_dismiss_text" ) }; // NOI18N
        messagesDialogText.setText( messagesText.getText() );
        int value = JOptionPane.showOptionDialog( this,
                                                  messagesDialogPanel,
                                                  XTCEFunctions.getText( "dialog_messageslist_text" ), // NOI18N
                                                  JOptionPane.PLAIN_MESSAGE,
                                                  JOptionPane.DEFAULT_OPTION,
                                                  null,
                                                  selectionValues,
                                                  XTCEFunctions.getText( "general_dismiss_text" ) ); // NOI18N

        if ( value == 0 ) {

            JFileChooser chooser = new JFileChooser( "." ); // NOI18N
            FileFilter fileFilter =
                new FileNameExtensionFilter( XTCEFunctions.getText( "file_chooser_text_text" ), // NOI18N
                                             "txt" ); // NOI18N
            chooser.addChoosableFileFilter( fileFilter );
            chooser.setFileFilter( fileFilter );
            chooser.setSelectedFile( new File( "messages.txt" ) ); // NOI18N
            int status = chooser.showSaveDialog( this );
            if (status == JFileChooser.APPROVE_OPTION) {
                try {
                    FileOutputStream stream =
                        new FileOutputStream( chooser.getSelectedFile() );
                    stream.write( messagesDialogText.getText().getBytes() );
                } catch ( Exception ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() +
                            XTCEFunctions.getText( "dialog_export_error_writing" ) + // NOI18N
                            " " + // NOI18N
                            chooser.getSelectedFile() );
                }
            }

        }      

    }//GEN-LAST:event_mainWindowMessagesDialogMenuItemActionPerformed

    private void tcDefinitionsSpaceSystemTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tcDefinitionsSpaceSystemTreeValueChanged

        drawTelecommandTree();

    }//GEN-LAST:event_tcDefinitionsSpaceSystemTreeValueChanged

    private void tcDefinitionsSpaceSystemTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tcDefinitionsSpaceSystemTreeMousePressed

        if ( SwingUtilities.isLeftMouseButton( evt ) == true ) {
           //drawTelecommandTree();
        }

    }//GEN-LAST:event_tcDefinitionsSpaceSystemTreeMousePressed

    private void tmContainerTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmContainerTableMousePressed

        if ( fileOpenWarning() == true ) return;

        XTCEViewerFunctions.showRightClickTableMenu( evt,
                                                     tmContainerTable,
                                                     containerTablePopupMenu );

    }//GEN-LAST:event_tmContainerTableMousePressed

    private void showContainerXmlMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showContainerXmlMenuItemActionPerformed

        XTCEViewerContainerTreeNode node =
           (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
        if ( node != null ) {
            try {
                XTCETMContainer container = node.getContainerReference();
                XTCEViewerContainerXmlDialog dialog = new XTCEViewerContainerXmlDialog( this, true, container );
                dialog.setVisible( true );
            } catch ( XTCEDatabaseException ex ) {
                logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
            } catch ( NullPointerException ex ) {
                JOptionPane.showMessageDialog( this,
                                               XTCEFunctions.getText( "dialog_selectedrownocontainer_text" ), // NOI18N
                                               XTCEFunctions.getText( "general_error" ), // NOI18N
                                               JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_showContainerXmlMenuItemActionPerformed

    private void mainWindowRecentFilesMaxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowRecentFilesMaxMenuItemActionPerformed

        String current  = Integer.toString(prefs.getRecentFilesMaxCountOption() );
        Object message  = XTCEFunctions.getText( "dialog_entermaxfiles_text" ); // NOI18N
        String response = (String)JOptionPane.showInputDialog( this,
                                                               message,
                                                               XTCEFunctions.getText( "dialog_recentfilesmax_text" ), // NOI18N
                                                               JOptionPane.INFORMATION_MESSAGE,
                                                               null,
                                                               null,
                                                               current );
        if ( ( response != null ) && ( response.equals( current ) == false ) ) {
            try {
                int value = Integer.parseInt( response );
                if ( value >= 0 ) {
                    prefs.setRecentFilesMaxCountOption( value );
                } else {
                    throw new NumberFormatException( XTCEFunctions.getText( "dialog_nonegativenumber_text" ) ); // NOI18N
                }
            } catch ( NumberFormatException ex ) {
                JOptionPane.showMessageDialog( this,
                                               XTCEFunctions.getText( "dialog_invalidinteger_text" ), // NOI18N
                                               XTCEFunctions.getText( "general_error" ), // NOI18N
                                               JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_mainWindowRecentFilesMaxMenuItemActionPerformed

    private void mainWindowClearRecentFilesMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowClearRecentFilesMenuItemActionPerformed

        prefs.clearRecentFilesList( mainWindowOpenRecentMenu );

    }//GEN-LAST:event_mainWindowClearRecentFilesMenuItemActionPerformed

    private void mainWindowShowMetricsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowShowMetricsMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        XTCESpaceSystemMetrics metrics = xtceDatabaseFile.getMetrics();

        spaceSystemsTotal.setText( Long.toString( metrics.getNumberOfChildSpaceSystems() ) );
        tmParametersTotal.setText( Long.toString( metrics.getNumberOfTelemetryParameters() ) );
        tcParametersTotal.setText( Long.toString( metrics.getNumberOfTelecommandParameters() ) );
        parametersTotal.setText( Long.toString( metrics.getNumberOfParameters() ) );
        tmParameterTypesTotal.setText( Long.toString( metrics.getNumberOfTelemetryParameterTypes() ) );
        tcParameterTypesTotal.setText( Long.toString( metrics.getNumberOfTelecommandParameterTypes() ) );
        parameterTypesTotal.setText( Long.toString( metrics.getNumberOfParameterTypes() ) );
        argumentsTotal.setText( Long.toString( metrics.getNumberOfTelecommandArguments() ) );
        argumentTypesTotal.setText( Long.toString( metrics.getNumberOfTelecommandArgumentTypes() ) );
        telecommandsTotal.setText( Long.toString( metrics.getNumberOfTelecommands() ) );
        tmContainersTotal.setText( Long.toString( metrics.getNumberOfTelemetryContainers() ) );
        tcContainersTotal.setText( Long.toString( metrics.getNumberOfTelecommandContainers() ) );
        containersTotal.setText( Long.toString( metrics.getNumberOfContainers() ) );

        JOptionPane.showMessageDialog( this,
                                       databaseMetricsPanel,
                                       XTCEFunctions.getText( "dialog_totals_text" ), // NOI18N
                                       JOptionPane.PLAIN_MESSAGE);

    }//GEN-LAST:event_mainWindowShowMetricsMenuItemActionPerformed

    private void mainWindowLocaleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowLocaleMenuItemActionPerformed

        Locale currentLocale = prefs.getLanguagePreference();
        //Locale[] locales = Locale.getAvailableLocales();
        Locale[] locales = { new Locale( "en", "US"), new Locale( "fr", "FR" ) }; // NOI18N
        ArrayList<Locale> xtceViewerLocales = new ArrayList<>();
        for ( int iii = 0; iii < locales.length; ++iii ) {
            if ( XTCEFunctions.checkLocaleAvailable( locales[iii] ) == true ) {
                xtceViewerLocales.add( locales[iii] );
            }
        }
        Object[] options = new Object[xtceViewerLocales.size()];
        for ( int iii = 0; iii < xtceViewerLocales.size(); ++iii ) {
            options[iii] = xtceViewerLocales.get( iii ).getDisplayName( currentLocale );
        }
        Object selected = JOptionPane.showInputDialog( this,
                                                       XTCEFunctions.getText( "dialog_chooselocale_text" ), // NOI18N
                                                       XTCEFunctions.getText( "dialog_intlpreference_text" ), // NOI18N
                                                       JOptionPane.INFORMATION_MESSAGE,
                                                       null,
                                                       options,
                                                       currentLocale.getDisplayName() );
        if ( selected == null ) {
            return;
        }

        for ( int iii = 0; iii < xtceViewerLocales.size(); ++iii ) {
            if ( xtceViewerLocales.get( iii ).getDisplayName( currentLocale ).equals(selected) == true ) {
                XTCEFunctions.setLocalePreference( xtceViewerLocales.get( iii ) );
                prefs.setLanguagePreference( xtceViewerLocales.get( iii ) );
                JOptionPane.showMessageDialog( this,
                                               XTCEFunctions.getText( "dialog_intlprefchange_text" ), // NOI18N
                                               XTCEFunctions.getText( "dialog_restartrequired_text" ), // NOI18N
                                               JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

    }//GEN-LAST:event_mainWindowLocaleMenuItemActionPerformed

    private void tcTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tcTreeValueChanged

        drawTelecommandContentTable( null );

    }//GEN-LAST:event_tcTreeValueChanged

    private void mainWindowShowAllConditionalsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowShowAllConditionalsMenuItemActionPerformed

        prefs.setShowAllContainerConditionalsOption( mainWindowShowAllConditionalsMenuItem.getState() );

        XTCEViewerContainerTreeNode node =
            (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();

        if ( node != null) {
            XTCEContainerContentModel model = node.getContentModel();
            if ( model != null ) {
                model.setShowAllConditionals( mainWindowShowAllConditionalsMenuItem.getState() );
                List<XTCEContainerEntryValue> values = model.getUserValues();
                drawContainerContentTable( values );
            } else {
                drawContainerContentTable( null );
            }
        }

        XTCEViewerTelecommandTreeNode node2 =
            (XTCEViewerTelecommandTreeNode)tcTree.getLastSelectedPathComponent();

        if ( node2 != null ) {
            XTCETelecommandContentModel model = node2.getContentModel();
            if ( model != null ) {
                model.setShowAllConditionals( mainWindowShowAllConditionalsMenuItem.getState() );
                List<XTCEContainerEntryValue> values = model.getUserValues();
                drawTelecommandContentTable( values );
            } else {
                drawTelecommandContentTable( null );
            }
        }

    }//GEN-LAST:event_mainWindowShowAllConditionalsMenuItemActionPerformed

    private void showItemXmlElementsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showItemXmlElementsMenuItemActionPerformed

        XTCEViewerContainerTreeNode node =
            (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
        if ( node == null ) {
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "rightclick_xml_no_tm_container_error_message" ) ); // NOI18N
            return;
        }

        int row = tmContainerTable.getSelectedRow();
        if ( row == -1 ) {
            return;
        }

        try {
            if ( node.getContentModel().getContentList().get( row ).getEntryType() == FieldType.CONTAINER ) {
                XTCETMContainer container = node.getContentModel().getContentList().get( row ).getTelemetryContainer();
                XTCEViewerContainerXmlDialog dialog = new XTCEViewerContainerXmlDialog( this, true, container );
                dialog.setVisible( true );
            } else if ( node.getContentModel().getContentList().get( row ).getEntryType() == FieldType.PARAMETER ) {
                XTCEParameter parameter = node.getContentModel().getContentList().get( row ).getParameter();
                XTCEViewerParameterXmlDialog dialog = new XTCEViewerParameterXmlDialog( this, true, parameter );
                dialog.setVisible( true );
            } else {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_container_table_error_message" ) ); // NOI18N
            }
        } catch ( XTCEDatabaseException ex ) {
            logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
        } catch ( NullPointerException ex ) {
            JOptionPane.showMessageDialog( this,
                                           XTCEFunctions.getText( "rightclick_container_table_null_error_message" ), // NOI18N
                                           XTCEFunctions.getText( "general_error" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_showItemXmlElementsMenuItemActionPerformed

    private void goToEntryMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToEntryMenuItemActionPerformed

        XTCEViewerContainerTreeNode node =
            (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
        if ( node == null ) {
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "rightclick_xml_no_tm_container_error_message" ) ); // NOI18N
            return;
        }

        int row = tmContainerTable.getSelectedRow();
        if ( row == -1 ) {
            return;
        }

        try {
            if ( node.getContentModel().getContentList().get( row ).getEntryType() == FieldType.CONTAINER ) {
                String containerPath =
                    node.getContentModel().getContentList().get( row ).getTelemetryContainer().getInheritancePath();
                selectContainerFromTree( containerPath );
            } else if ( node.getContentModel().getContentList().get( row ).getEntryType() == FieldType.PARAMETER ) {
                String parameterPath =
                    node.getContentModel().getContentList().get( row ).getParameter().getSpaceSystemPath();
                String parameterName =
                    node.getContentModel().getContentList().get( row ).getParameter().getName();
                mainWindowPrimaryWorkspace.setSelectedIndex( 1 );
                XTCEViewerFunctions.selectSpaceSystemFromTree( tmParameterSpaceSystemTree,
                                                               parameterPath,
                                                               false );
                selectParameterFromTable( tmParametersTable,
                                          parameterName,
                                          true );
            } else {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_container_table_error_message" ) ); // NOI18N
            }
        } catch ( NullPointerException ex ) {
            JOptionPane.showMessageDialog( this,
                                           XTCEFunctions.getText( "rightclick_container_table_null_error_message" ), // NOI18N
                                           XTCEFunctions.getText( "general_error" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_goToEntryMenuItemActionPerformed

    private void setConditionTrueMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setConditionTrueMenuItemActionPerformed

        XTCEViewerContainerTreeNode node =
            (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
        if ( node == null ) {
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "rightclick_xml_no_tm_container_error_message" ) ); // NOI18N
            return;
        }

        int row = tmContainerTable.getSelectedRow();
        if ( row == -1 ) {
            return;
        }

        if ( node.getContentModel().getContentList().get( row ).getConditionList().isEmpty() == true ) {
            JOptionPane.showMessageDialog( this,
                                           XTCEFunctions.getText( "rightclick_container_table_noconditions_message" ), // NOI18N
                                           XTCEFunctions.getText( "general_error" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
        }

        List<XTCEContainerEntryValue> conditions =
            node.getContentModel().getContentList().get( row ).getConditionList();

        List<XTCEContainerEntryValue> valueList =
            node.getContentModel().getUserValues();

        for ( XTCEContainerEntryValue condition : conditions ) {
            boolean found = false;
            for ( XTCEContainerEntryValue value : valueList ) {
                if ( value.equals( condition ) == true ) {
                    found = true;
                }
                if ( value.getItemFullPath().equals( condition.getItemFullPath() ) == true ) {
                    valueList.remove( value );
                    break;
                }
            }
            if ( found == false ) {
                valueList.add( condition );
            }
        }

        drawContainerContentTable( valueList );

    }//GEN-LAST:event_setConditionTrueMenuItemActionPerformed

    private void containerDrawingLeftToRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containerDrawingLeftToRightActionPerformed

        prefs.setContainerOrientationOption( "LEFT_TO_RIGHT" ); // NOI18N
        containerDrawingLeftToRight.setSelected( true );
        containerDrawingTopToBottom.setSelected( false );
        if ( tmContainerDrawingScrollPane.getViewport() != null ) {
            XTCEViewerContainerDrawing drawing = (XTCEViewerContainerDrawing)
                tmContainerDrawingScrollPane.getViewport().getView();
            drawing.reOrient( Orientation.LEFT_TO_RIGHT );
            drawing.repaint();
        }

    }//GEN-LAST:event_containerDrawingLeftToRightActionPerformed

    private void containerDrawingTopToBottomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_containerDrawingTopToBottomActionPerformed

        prefs.setContainerOrientationOption( "TOP_TO_BOTTOM" ); // NOI18N
        containerDrawingLeftToRight.setSelected( false );
        containerDrawingTopToBottom.setSelected( true );
        if ( tmContainerDrawingScrollPane.getViewport() != null ) {
            XTCEViewerContainerDrawing drawing = (XTCEViewerContainerDrawing)
                tmContainerDrawingScrollPane.getViewport().getView();
            drawing.reOrient( Orientation.TOP_TO_BOTTOM );
            drawing.repaint();
        }

    }//GEN-LAST:event_containerDrawingTopToBottomActionPerformed

    private void tmContainerDrawingScrollPaneMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmContainerDrawingScrollPaneMousePressed

        if ( SwingUtilities.isRightMouseButton( evt ) == true ) {
            if ( xtceDatabaseFile != null ) {
                containerDrawingPopupMenu.show( tmContainerDrawingScrollPane, evt.getX(), evt.getY() );
            }
        }

    }//GEN-LAST:event_tmContainerDrawingScrollPaneMousePressed

    private void saveContainerDrawingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveContainerDrawingMenuItemActionPerformed

        if ( tmContainerDrawingScrollPane.getViewport().getView() == null ) {
            JOptionPane.showMessageDialog( this,
                                           XTCEFunctions.getText( "rightclick_container_noselection_message" ), // NOI18N
                                           XTCEFunctions.getText( "general_error" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
            return;
        }

        XTCEViewerContainerDrawing drawing = (XTCEViewerContainerDrawing)
            tmContainerDrawingScrollPane.getViewport().getView();

        XTCEViewerContainerTreeNode node =
           (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();

        XTCENamedObject container = node.getContainerReference();

        JFileChooser chooser = new JFileChooser( "." ); // NOI18N

        FileFilter fileFilter =
            new FileNameExtensionFilter( "Portable Network Graphics (png)", "png" ); // NOI18N
        chooser.addChoosableFileFilter( fileFilter );
        chooser.addChoosableFileFilter( new FileNameExtensionFilter( "Windows Bitmap (bmp)", "bmp" ) ); // NOI18N
        chooser.addChoosableFileFilter( new FileNameExtensionFilter( "Joint Photographic Experts Group (jpg)", "jpg" ) ); // NOI18N
        chooser.addChoosableFileFilter( new FileNameExtensionFilter( "Joint Photographic Experts Group (jpeg)", "jpeg" ) ); // NOI18N
        chooser.addChoosableFileFilter( new FileNameExtensionFilter( "Graphics Interchange Format (gif)", "gif" ) ); // NOI18N
        chooser.setFileFilter( fileFilter );
        chooser.setSelectedFile( new File ( container.getName() + ".png" ) ); // NOI18N
        chooser.setCurrentDirectory( new File( prefs.getCurrentWorkingDirectory() ) );

        int status = chooser.showSaveDialog( this );
        if (status == JFileChooser.APPROVE_OPTION) {
            try {
                drawing.save( chooser.getSelectedFile()  );
            } catch ( Exception ex ) {
                JOptionPane.showMessageDialog( this,
                                               ex.getLocalizedMessage(),
                                               XTCEFunctions.getText( "general_error" ), // NOI18N
                                               JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_saveContainerDrawingMenuItemActionPerformed

    private void cloneContainerDrawingMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cloneContainerDrawingMenuItemActionPerformed

        if ( tmContainerDrawingScrollPane.getViewport().getView() == null ) {
            JOptionPane.showMessageDialog( this,
                                           "No Container Selected",
                                           XTCEFunctions.getText( "general_error" ), // NOI18N
                                           JOptionPane.ERROR_MESSAGE);
            return;
        }

        XTCEViewerContainerDrawing drawing = (XTCEViewerContainerDrawing)
            tmContainerDrawingScrollPane.getViewport().getView();

        XTCEViewerContainerDrawing newDrawing = drawing.deepCopy();

        XTCEViewerContainerTreeNode node =
           (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();

        XTCENamedObject container = node.getContainerReference();

        final JFrame newWindow = new JFrame( container.getFullPath() );
        JScrollPane graphScrollPane = new JScrollPane();
        graphScrollPane.setViewportView( newDrawing );
        newWindow.getContentPane().add( graphScrollPane, BorderLayout.CENTER );
        JButton dismissButton = new JButton( XTCEFunctions.getText( "general_dismiss_text" ) ); // NOI18N
        dismissButton.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed( ActionEvent evt ) {
                newWindow.dispose();
            }
        } );
        newWindow.getContentPane().add( dismissButton, BorderLayout.SOUTH );
        newWindow.pack();
        newWindow.setVisible( true );

    }//GEN-LAST:event_cloneContainerDrawingMenuItemActionPerformed

    private void mainWindowFindContainerMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowFindContainerMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        XTCEViewerContainerFindDialog findDialog =
            new XTCEViewerContainerFindDialog( this, prefs, xtceDatabaseFile );

    }//GEN-LAST:event_mainWindowFindContainerMenuItemActionPerformed

    private void mainWindowFindTelecommandMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowFindTelecommandMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        XTCEViewerTelecommandFindDialog findDialog =
            new XTCEViewerTelecommandFindDialog( this, prefs, xtceDatabaseFile );

    }//GEN-LAST:event_mainWindowFindTelecommandMenuItemActionPerformed

    private void detailSpaceSystemTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_detailSpaceSystemTreeValueChanged

        detailSpaceSystemPanelScrollPane.setViewportView( null );

        XTCEViewerSpaceSystemTreeNode node =
            (XTCEViewerSpaceSystemTreeNode)detailSpaceSystemTree.getLastSelectedPathComponent();
        if ( node == null ) {
            return;
        }

        XTCEViewerSpaceSystemDetails detailDataPanel =
            new XTCEViewerSpaceSystemDetails( node.getSpaceSystemReference(),
                                              detailSpaceSystemPanelScrollPane,
                                              mainWindowEditDocumentMenuItem.isSelected() );
        detailSpaceSystemPanelScrollPane.setViewportView( detailDataPanel );

    }//GEN-LAST:event_detailSpaceSystemTreeValueChanged

    private void mainWindowEditDocumentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowEditDocumentMenuItemActionPerformed

        boolean editEnabled = mainWindowEditDocumentMenuItem.isSelected();

        mainWindowCreateFileMenuItem.setEnabled( editEnabled );
        addSpaceSystemMenuItem.setEnabled( editEnabled );
        deleteSpaceSystemMenuItem.setEnabled( editEnabled );

        XTCEViewerSpaceSystemDetails detailDataPanel = (XTCEViewerSpaceSystemDetails)
            detailSpaceSystemPanelScrollPane.getViewport().getView();
        if ( detailDataPanel != null ) {
            detailDataPanel.setEditable( editEnabled );
        }

    }//GEN-LAST:event_mainWindowEditDocumentMenuItemActionPerformed

    private void showEncodeDecodeDialogMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showEncodeDecodeDialogMenuItemActionPerformed

        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();
        int row = -1;
        if ( idx == 1 ) { // telemetry parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tmParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tm_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tmParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tmParametersTable.getValueAt( row, 0 );
                String alias = (String)tmParametersTable.getValueAt( row, 1 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelemetryParameter( pname );
                    XTCEViewerEncodeDecodeItemDialog dialog =
                        new XTCEViewerEncodeDecodeItemDialog( this, false, parameter, alias );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        } else if ( idx == 2 ) { // telecommand parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tcParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tc_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tcParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tcParametersTable.getValueAt( row, 0 );
                String alias = (String)tcParametersTable.getValueAt( row, 1 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelecommandParameter( pname );
                    XTCEViewerEncodeDecodeItemDialog dialog =
                        new XTCEViewerEncodeDecodeItemDialog( this, false, parameter, alias );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        }

    }//GEN-LAST:event_showEncodeDecodeDialogMenuItemActionPerformed

    private void mainWindowExpandContainerTreeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowExpandContainerTreeMenuItemActionPerformed

        XTCEViewerFunctions.expandAllTreeNodes( tmContainerTree );

    }//GEN-LAST:event_mainWindowExpandContainerTreeMenuItemActionPerformed

    private void mainWindowHelpSchemaMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowHelpSchemaMenuItemActionPerformed

        openHelp( "org/omg/space/xtce/schema/doc/SpaceSystemV1.2-27Feb2014-mods.html" ); // NOI18N

    }//GEN-LAST:event_mainWindowHelpSchemaMenuItemActionPerformed

    private void mainWindowHelpApiMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowHelpApiMenuItemActionPerformed

        openHelp( "org/omg/space/xtce/toolkit/doc/index.html" ); // NOI18

    }//GEN-LAST:event_mainWindowHelpApiMenuItemActionPerformed

    private void mainWindowHelpToolMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowHelpToolMenuItemActionPerformed

        logMsg( XTCEFunctions.generalWarningPrefix() +
                XTCEFunctions.getText( "general_not_implemented" ) ); // NOI18N

    }//GEN-LAST:event_mainWindowHelpToolMenuItemActionPerformed

    private void mainWindowHelpCurrentMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowHelpCurrentMenuItemActionPerformed

        logMsg( XTCEFunctions.generalWarningPrefix() +
                XTCEFunctions.getText( "general_not_implemented" ) ); // NOI18N

    }//GEN-LAST:event_mainWindowHelpCurrentMenuItemActionPerformed

    private void mainWindowHelpAboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowHelpAboutMenuItemActionPerformed

        logMsg( XTCEFunctions.generalWarningPrefix() +
                XTCEFunctions.getText( "general_not_implemented" ) ); // NOI18N

    }//GEN-LAST:event_mainWindowHelpAboutMenuItemActionPerformed

    private void mainWindowUseXincludeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowUseXincludeMenuItemActionPerformed

        prefs.setUseXIncludeOption( mainWindowUseXincludeMenuItem.isSelected() );

    }//GEN-LAST:event_mainWindowUseXincludeMenuItemActionPerformed

    private void mainWindowFindByXPathMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainWindowFindByXPathMenuItemActionPerformed

        if ( fileOpenWarning() == true ) return;

        if ( xpathDialog == null ) {
            xpathDialog = new XTCEViewerXpathQueryDialog( this,
                                                          prefs,
                                                          xtceDatabaseFile );
        } else {
            xpathDialog.setVisible( true );
            xpathDialog.toFront();
        }

    }//GEN-LAST:event_mainWindowFindByXPathMenuItemActionPerformed

    private void copyContainerCellMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyContainerCellMenuItemActionPerformed

        if ( xtceDatabaseFile == null ) return;

        XTCEViewerFunctions.copyCell( tmContainerTable );

    }//GEN-LAST:event_copyContainerCellMenuItemActionPerformed

    private void copyParameterCellMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyParameterCellMenuItemActionPerformed

        if ( xtceDatabaseFile == null ) return;

        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();

        if ( idx == 1 ) {
            XTCEViewerFunctions.copyCell( tmParametersTable );
        } else if ( idx == 2 ) {
            XTCEViewerFunctions.copyCell( tcParametersTable );
        }

    }//GEN-LAST:event_copyParameterCellMenuItemActionPerformed

    private void tmStreamTreeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmStreamTreeMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tmStreamTreeMousePressed

    private void tmStreamTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_tmStreamTreeValueChanged

        drawStreamContentTree();

    }//GEN-LAST:event_tmStreamTreeValueChanged

    private void tmStreamContentTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tmStreamContentTreeMouseClicked

        if ( ( evt.getClickCount() == 2 ) && ( xtceDatabaseFile != null ) ) {

            XTCEViewerContainerTreeNode selectedNode =
                (XTCEViewerContainerTreeNode)tmStreamContentTree.getLastSelectedPathComponent();

            if ( selectedNode == null ) {
                return;
            }

            XTCETMContainer container = selectedNode.getContainerReference();

            if ( container == null ) {
                return;
            }

            String completePath  = container.getFullPath();
            String containerName =
                XTCEFunctions.getNameFromPathReferenceString( completePath );
            String containerPath =
                XTCEFunctions.getPathNameFromReferenceString( completePath );

            goToContainer( containerName, containerPath );

        }

    }//GEN-LAST:event_tmStreamContentTreeMouseClicked

    private void showParameterUsageMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showParameterUsageMenuItemActionPerformed

        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();
        int row = -1;
        if ( idx == 1 ) { // telemetry parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tmParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tm_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tmParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tmParametersTable.getValueAt( row, 0 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelemetryParameter( pname );
                    if ( parameterUsageDialog != null ) {
                        parameterUsageDialog.setVisible( false );
                    }
                    parameterUsageDialog = 
                        new XTCEViewerParameterUsageDialog( this, xtceDatabaseFile, parameter );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        } else if ( idx == 2 ) { // telecommand parameters
            XTCEViewerSpaceSystemTreeNode node =
                (XTCEViewerSpaceSystemTreeNode)tcParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( node == null ) {
                logMsg( XTCEFunctions.generalErrorPrefix() +
                        XTCEFunctions.getText( "rightclick_xml_no_tc_spacesystem_error_message" ) ); // NOI18N
                return;
            }
            row = tcParametersTable.getSelectedRow();
            if ( row != -1 ) {
                String pname = (String)tcParametersTable.getValueAt( row, 0 );
                XTCESpaceSystem ss = node.getSpaceSystemReference();
                try {
                    XTCEParameter parameter = ss.getTelecommandParameter( pname );
                    if ( parameterUsageDialog != null ) {
                        parameterUsageDialog.setVisible( false );
                    }
                    parameterUsageDialog = 
                        new XTCEViewerParameterUsageDialog( this, xtceDatabaseFile, parameter );
                } catch ( XTCEDatabaseException ex ) {
                    logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
                }
            }
        }

    }//GEN-LAST:event_showParameterUsageMenuItemActionPerformed

    public void goToParameter( String  parameterName,
                               String  spaceSystemName,
                               boolean isTelemetryParameter ) {

        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();

        if ( isTelemetryParameter == true ) {
            if ( idx != 1 ) {
                mainWindowPrimaryWorkspace.setSelectedIndex( 1 );
            }
            XTCEViewerSpaceSystemTreeNode selectedNode =
                (XTCEViewerSpaceSystemTreeNode)tmParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( ( selectedNode == null ) || ( selectedNode.getFullPath().equals( spaceSystemName ) == false ) ) {
                XTCEViewerFunctions.selectSpaceSystemFromTree( tmParameterSpaceSystemTree,
                                                               spaceSystemName,
                                                               false );
            }
            selectParameterFromTable( tmParametersTable,
                                      parameterName,
                                      true );
        } else {
            if ( idx != 2 ) {
                mainWindowPrimaryWorkspace.setSelectedIndex( 2 );
            }
            XTCEViewerSpaceSystemTreeNode selectedNode =
                (XTCEViewerSpaceSystemTreeNode)tcParameterSpaceSystemTree.getLastSelectedPathComponent();
            if ( ( selectedNode == null ) || ( selectedNode.getFullPath().equals( spaceSystemName ) == false ) ) {
                XTCEViewerFunctions.selectSpaceSystemFromTree( tcParameterSpaceSystemTree,
                                                               spaceSystemName,
                                                               false );
            }
            selectParameterFromTable( tcParametersTable,
                                      parameterName,
                                      true );
        }

    }

    public void goToContainer( String  containerName,
                               String  spaceSystemName ) {

        String containerFullPath = spaceSystemName + "/" + containerName;

        if ( mainWindowPrimaryWorkspace.getSelectedIndex() != 3 ) {
            mainWindowPrimaryWorkspace.setSelectedIndex( 3 );
        }
        XTCEViewerContainerTreeNode selectedNode =
            (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();
        if ( ( selectedNode == null ) || ( selectedNode.getContainerReference().getFullPath().equals( containerFullPath ) == false ) ) {
            try {
                XTCETMContainer container = xtceDatabaseFile.getSpaceSystem( spaceSystemName ).getContainer( containerName );
                selectContainerFromTree( container.getInheritancePath() );
            } catch ( Exception ex ) {
                // do nothing?
            }
        }

    }

    public void goToTelecommand( String  telecommandName,
                                 String  spaceSystemName ) {

        if ( mainWindowPrimaryWorkspace.getSelectedIndex() != 4 ) {
            mainWindowPrimaryWorkspace.setSelectedIndex( 4 );
        }
        XTCEViewerSpaceSystemTreeNode selectedNode =
            (XTCEViewerSpaceSystemTreeNode)tcDefinitionsSpaceSystemTree.getLastSelectedPathComponent();
        if ( ( selectedNode == null ) || ( selectedNode.getFullPath().equals( spaceSystemName ) == false ) ) {
            XTCEViewerFunctions.selectSpaceSystemFromTree( tcDefinitionsSpaceSystemTree,
                                                           spaceSystemName,
                                                           false );
        }
        selectTelecommandFromTree( telecommandName );

    }

    private void buildContainerTree() {

        DefaultTreeModel tmodel = (DefaultTreeModel)tmContainerTree.getModel();

        List<XTCETMContainer> containers = xtceDatabaseFile.getContainers();
        Collections.sort( containers );

        XTCEViewerContainerTreeNode rootObj =
            new XTCEViewerContainerTreeNode( XTCEFunctions.getText( "general_containers" ), // NOI18N
                                             null );
        tmodel.setRoot( rootObj );

        tmContainerTree.setCellRenderer( new XTCEViewerContainerTreeCellRenderer() );

        for ( XTCETMContainer container : containers ) {
            String[] fields = container.getInheritancePath().split( "/" ); // NOI18N
            XTCEViewerContainerTreeNode obj = rootObj;
            for ( int jjj = 1; jjj < fields.length; ++jjj ) {
                obj = setContainerTreeNode( obj, container, false );
            }
        }

        tmContainerTree.setRootVisible( false );

        tmodel.reload();

    }

    private void buildStreamTree() {

        DefaultTreeModel tmodel = (DefaultTreeModel)tmStreamTree.getModel();

        List<XTCETMStream> streams = xtceDatabaseFile.getStreams();

        XTCEViewerStreamTreeNode rootObj =
            new XTCEViewerStreamTreeNode( XTCEFunctions.getText( "general_streams" ), null ); // NOI18N
        tmodel.setRoot( rootObj );

        for ( XTCETMStream stream : streams ) {
            XTCEViewerStreamTreeNode node =
                new XTCEViewerStreamTreeNode( stream.getName(), stream );
            rootObj.add( node );
        }

        tmStreamTree.setRootVisible( false );

        tmodel.reload();

    }

    private void resetAllDisplays() {

        updateParameterTable( tmParametersTable, null, null );
        updateParameterTable( tcParametersTable, null, null );
        updateContainerTable( null );
        buildSpaceSystemTrees();

    }
    
    private void buildSpaceSystemTrees() {

        XTCEViewerFunctions.clearTree( detailSpaceSystemTree );
        XTCEViewerFunctions.clearTree( tmParameterSpaceSystemTree );
        XTCEViewerFunctions.clearTree( tcParameterSpaceSystemTree );
        XTCEViewerFunctions.clearTree( tcDefinitionsSpaceSystemTree );
        XTCEViewerFunctions.clearTree( tmContainerTree );
        XTCEViewerFunctions.clearTree( tcTree );
        XTCEViewerFunctions.clearTree( tmStreamTree );
        XTCEViewerFunctions.clearTree( tmStreamContentTree );
        
        if ( xtceDatabaseFile == null ) {
            spaceSystems = null;
            return;
        } else {
            spaceSystems = xtceDatabaseFile.getSpaceSystemTree();
        }
        
        XTCEViewerFunctions.buildSpaceSystemTree( detailSpaceSystemTree,
                                                  spaceSystems );
        XTCEViewerFunctions.buildSpaceSystemTree( tmParameterSpaceSystemTree,
                                                  spaceSystems );
        XTCEViewerFunctions.buildSpaceSystemTree( tcParameterSpaceSystemTree,
                                                  spaceSystems );
        XTCEViewerFunctions.buildSpaceSystemTree( tcDefinitionsSpaceSystemTree,
                                                  spaceSystems );
        buildContainerTree();
        buildStreamTree();

    }

    private XTCEViewerContainerTreeNode setContainerTreeNode( XTCEViewerContainerTreeNode obj, XTCETMContainer container, boolean appendDescription ) {

        for ( int iii = 0; iii < obj.getChildCount(); ++iii ) {
            XTCEViewerContainerTreeNode child =
                (XTCEViewerContainerTreeNode)(obj.getChildAt( iii ));
            String existingPath = child.getContainerReference().getInheritancePath();
            if ( existingPath.equals( container.getInheritancePath() ) == true ) {
                //System.out.println( "matched " + spaceSystem.getFullPath() );
                return child;
            } else {
                existingPath += "/";
                if ( container.getInheritancePath().startsWith( existingPath ) == true ) {
                    //System.out.println( "matched starts " + spaceSystem.getFullPath() );
                    return child;
                }
            }
        }

        String label = container.getName();

        if ( appendDescription == true ) {
            if ( container.getDescription().isEmpty() == false ) {
                StringBuilder extendedText = new StringBuilder();
                extendedText.append( label );
                extendedText.append( " ( " );
                extendedText.append( container.getDescription() );
                extendedText.append( " )" );
                label = extendedText.toString();
            }
        }

        XTCEViewerContainerTreeNode newchild =
            new XTCEViewerContainerTreeNode( label, container );
        obj.add( newchild );

        return newchild;

    }

    private XTCEViewerTelecommandTreeNode setTelecommandTreeNode( XTCEViewerTelecommandTreeNode obj, XTCETelecommand telecommand ) {

        for ( int iii = 0; iii < obj.getChildCount(); ++iii ) {
            XTCEViewerTelecommandTreeNode child = (XTCEViewerTelecommandTreeNode)(obj.getChildAt( iii ));
            String existingPath = child.getTelecommandReference().getInheritancePath();
            //System.out.println( "Inheritance Path for TC: " + existingPath );
            if ( existingPath.equals( telecommand.getInheritancePath() ) == true ) {
                //System.out.println( "matched " + existingPath );
                return child;
            } else {
                existingPath += "/"; // NOI18N
                if ( telecommand.getInheritancePath().startsWith( existingPath ) == true ) {
                    //System.out.println( "matched starts " + existingPath );
                    return child;
                }
            }
        }

        boolean showAllNamespaces   = prefs.getShowAllAliasNamespacesOption();
        boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
        String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();

        String aliasString =
            XTCEFunctions.makeAliasDisplayString( telecommand,
                                                  showAllNamespaces,
                                                  showAliasNamespaces,
                                                  preferredNamespace );
        String telecommandLabel = null;
        if ( aliasString.isEmpty() == false ) {
            telecommandLabel = telecommand.getName() + " (" + aliasString + ")"; // NOI18N
        } else {
            telecommandLabel = telecommand.getName();
        }
        XTCEViewerTelecommandTreeNode newchild =
            new XTCEViewerTelecommandTreeNode( telecommandLabel, telecommand );
        obj.add( newchild );

        return newchild;

    }

    private void drawTelemetryParameterTable() {
        XTCEViewerSpaceSystemTreeNode node =
           (XTCEViewerSpaceSystemTreeNode)tmParameterSpaceSystemTree.getLastSelectedPathComponent();
        if ( node != null ) {
            //System.out.println( "TM Parameter Tab: " + node.getFullPath() );
            List<XTCEParameter> parameters =
                node.getSpaceSystemReference().getTelemetryParameters();
            updateParameterTable( tmParametersTable,
                                  parameters,
                                  node.getSpaceSystemReference() );
            logMsg( XTCEFunctions.getText( "ss_processed" ) + // NOI18N
                    " '" + // NOI18N
                    node.getSpaceSystemReference().getName() +
                    "' " + // NOI18N
                    XTCEFunctions.getText( "ss_processed_contains" ) + // NOI18N
                    " " + // NOI18N
                    Integer.toString( parameters.size() ) +
                    " " + // NOI18N
                    XTCEFunctions.getText( "ss_tmparameters" ) ); // NOI18N
        }
    }

    private void drawTelecommandParameterTable() {
        XTCEViewerSpaceSystemTreeNode node =
           (XTCEViewerSpaceSystemTreeNode)tcParameterSpaceSystemTree.getLastSelectedPathComponent();
        if ( node != null ) {
            //System.out.println( "TC Parameter Tab: " + node.getFullPath() );
            List<XTCEParameter> parameters =
                node.getSpaceSystemReference().getTelecommandParameters();
            updateParameterTable( tcParametersTable,
                                  parameters,
                                  node.getSpaceSystemReference() );
            logMsg( XTCEFunctions.getText( "ss_processed" ) + // NOI18N
                    " '" + // NOI18N
                    node.getSpaceSystemReference().getName() +
                    "' " + // NOI18N
                    XTCEFunctions.getText( "ss_processed_contains" ) + // NOI18N
                    " " + // NOI18N
                    Integer.toString( parameters.size() ) +
                    " " + // NOI18N
                    XTCEFunctions.getText( "ss_tcparameters" ) ); // NOI18N
        }
    }

    private void drawContainerContentTable( List<XTCEContainerEntryValue> values ) {

        XTCEViewerContainerTreeNode node =
           (XTCEViewerContainerTreeNode)tmContainerTree.getLastSelectedPathComponent();

        if ( ( node != null ) && ( node.getContainerReference() != null ) ) {

            //System.out.println( "TM Container Tab: " + node.getFullPath() );
            XTCETMContainer container = node.getContainerReference();
            boolean showAllConditionals = prefs.getShowAllContainerConditionalsOption();
            try {
                // @todo this might be eligible to short circuit
                XTCEContainerContentModel containerModel =
                    xtceDatabaseFile.processContainer( container,
                                                       values,
                                                       showAllConditionals );
                updateContainerTable( containerModel );
                node.setContentModel( containerModel );

                String orientationOption =
                    prefs.getContainerOrientationOption();

                XTCEViewerContainerDrawing.Orientation orientDrawingFlag;
                if ( orientationOption.equals( "LEFT_TO_RIGHT" ) == true ) { // NOI18N
                    orientDrawingFlag = Orientation.LEFT_TO_RIGHT;
                } else if ( orientationOption.equals( "TOP_TO_BOTTOM" ) == true ) { // NOI18N
                    orientDrawingFlag = Orientation.TOP_TO_BOTTOM;
                } else {
                    orientDrawingFlag = Orientation.LEFT_TO_RIGHT;
                }

                boolean showAllNamespaces   = prefs.getShowAllAliasNamespacesOption();
                boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
                String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();

                XTCEViewerContainerDrawing drawing =
                    new XTCEViewerContainerDrawing( containerModel,
                                                    orientDrawingFlag,
                                                    showAllNamespaces,
                                                    showAliasNamespaces,
                                                    preferredNamespace );
         
                tmContainerDrawingScrollPane.setViewportView( drawing );

                logMsg( XTCEFunctions.getText( "ss_cont_processed" ) + // NOI18N
                        " '" + // NOI18N
                        containerModel.getContainerReference().getName() +
                        "' " + // NOI18N
                        XTCEFunctions.getText( "ss_processed_contains" ) + // NOI18N
                        " " + // NOI18N
                        Long.toString( containerModel.getContentList().size() ) +
                        " " + // NOI18N
                        XTCEFunctions.getText( "ss_cont_rowsoccupied" ) + // NOI18N
                        " " + // NOI18N
                        Long.toString( containerModel.getTotalSize() ) +
                        " " + // NOI18N
                        XTCEFunctions.getText( "ss_cont_bits" ) ); // NOI18N

            } catch ( XTCEDatabaseException ex ) {
                logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
            }

        }

    }

    private void drawStreamContentTree() {

        XTCEViewerStreamTreeNode node =
           (XTCEViewerStreamTreeNode)tmStreamTree.getLastSelectedPathComponent();

        XTCEViewerFunctions.clearTree( tmStreamContentTree );

        if ( node == null || node.getStreamReference() == null ) {
            return;
        }

        tmStreamContentTree.putClientProperty( "JTree.lineStyle", // NOI18N
                                               "Horizontal" ); // NOI18N

        DefaultTreeModel tmodel =
            (DefaultTreeModel)tmStreamContentTree.getModel();

        //System.out.println( "Stream selected " +
        //    node.getName() +
        //    " root path " +
        //    node.getStreamReference().getStreamContainerPath() );

        try {

            List<XTCETMContainer> containers =
                xtceDatabaseFile.getContainers( node.getStreamReference() );

            Collections.sort( containers );

            XTCEViewerContainerTreeNode rootObj =
                new XTCEViewerContainerTreeNode( XTCEFunctions.getText( "general_containers" ), // NOI18N
                                                 null );

            tmodel.setRoot( rootObj );

            tmStreamContentTree.setCellRenderer( new XTCEViewerContainerTreeCellRenderer() );

            for ( XTCETMContainer container : containers ) {
                //System.out.println( "Container " +
                //                    container.getName() +
                //                    " IPath " +
                //                    container.getInheritancePath() +
                //                    " CPath " +
                //                    container.getFullPath() );
                String[] fields =
                    container.getInheritancePath().split( "/" ); // NOI18N
                XTCEViewerContainerTreeNode obj = rootObj;
                for ( int jjj = 1; jjj < fields.length; ++jjj ) {
                    obj = setContainerTreeNode( obj, container, true );
                }
            }

        } catch ( XTCEDatabaseException ex ) {
            logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
        }

        tmStreamContentTree.setRootVisible( false );

        XTCEViewerFunctions.expandAllTreeNodes( tmStreamContentTree );

        tmodel.reload();

    }

    private void drawTelecommandTree() {
        XTCEViewerSpaceSystemTreeNode node =
           (XTCEViewerSpaceSystemTreeNode)tcDefinitionsSpaceSystemTree.getLastSelectedPathComponent();
        if ( node != null ) {
            //System.out.println( "TC Definitions Tab: " + node.getFullPath() );
            List<XTCETelecommand> telecommands = node.getSpaceSystemReference().getTelecommands();
            updateTelecommandTree( telecommands, node.getSpaceSystemReference() );
            XTCEViewerFunctions.expandAllTreeNodes( tcTree );
        }
    }

    private void drawTelecommandContentTable( List<XTCEContainerEntryValue> values ) {

        XTCEViewerTelecommandTreeNode node =
            (XTCEViewerTelecommandTreeNode)tcTree.getLastSelectedPathComponent();

        if ( ( node != null ) && ( node.getTelecommandReference() != null ) ) {

            //System.out.println( "Selected TC " + node.getTelecommandPath() );
            XTCETelecommand tcObject  = node.getTelecommandReference();

            boolean showAllConditionals =
                prefs.getShowAllContainerConditionalsOption();

            try {
                // @todo this might be eligible to short circuit
                XTCETelecommandContentModel containerModel =
                    xtceDatabaseFile.processTelecommand( tcObject,
                                                         values,
                                                         showAllConditionals );
                updateTelecommandTable( containerModel );
                node.setContentModel( containerModel );

                String orientationOption =
                    prefs.getContainerOrientationOption();

                //XTCEViewerContainerDrawing.Orientation orientDrawingFlag;
                //if ( orientationOption.equals( "LEFT_TO_RIGHT" ) == true ) {
                //    orientDrawingFlag = Orientation.LEFT_TO_RIGHT;
                //} else if ( orientationOption.equals( "TOP_TO_BOTTOM" ) == true ) {
                //    orientDrawingFlag = Orientation.TOP_TO_BOTTOM;
                //} else {
                //    orientDrawingFlag = Orientation.LEFT_TO_RIGHT;
                //}

                //boolean showAllNamespaces   = prefs.getShowAllAliasNamespacesOption();
                //boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
                //String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();

                //XTCEViewerContainerDrawing drawing =
                //    new XTCEViewerContainerDrawing( containerModel,
                //                                    orientDrawingFlag,
                //                                    showAllNamespaces,
                //                                    showAliasNamespaces,
                //                                    preferredNamespace );
         
                //tcContentDrawingScrollPane.setViewportView( drawing );

                logMsg( XTCEFunctions.getText( "ss_processed_tc" ) + // NOI18N
                        " '" + // NOI18N
                        containerModel.getContainerReference().getName() +
                        "' " + // NOI18N
                        XTCEFunctions.getText( "ss_processed_contains" ) + // NOI18N
                        " " + // NOI18N
                        Long.toString( containerModel.getContentList().size() ) +
                        " " + // NOI18N
                        XTCEFunctions.getText( "ss_cont_rowsoccupied" ) + // NOI18N
                        " " + // NOI18N
                        Long.toString( containerModel.getTotalSize() ) +
                        " " + // NOI18N
                        XTCEFunctions.getText( "ss_cont_bits" ) ); // NOI18N

            } catch ( XTCEDatabaseException ex ) {
                logMsg( XTCEFunctions.generalErrorPrefix() + ex.getLocalizedMessage() );
            }

        }

    }

    private void updateParameterTable( JTable table, List<XTCEParameter> parameters, XTCESpaceSystem spaceSystem ) {

        DefaultTableModel tableModel = (DefaultTableModel)table.getModel();
        tableModel.setRowCount( 0 );

        if ( parameters == null ) {
            return;
        }

        table.setDefaultRenderer( String.class,
                                  new XTCEViewerParameterTableCellRenderer( parameters ) );

        boolean showAllNamespaces   = prefs.getShowAllAliasNamespacesOption();
        boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
        String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();

        for ( XTCEParameter parameter : parameters ) {

            String aliasString =
                XTCEFunctions.makeAliasDisplayString( parameter,
                                                      showAllNamespaces,
                                                      showAliasNamespaces,
                                                      preferredNamespace );

            Object rowData[] = { parameter.getName(),
                                 aliasString,
                                 parameter.getEngineeringType(),
                                 parameter.getUnits(),
                                 parameter.getRawSizeInBits(),
                                 parameter.getRawType(),
                                 parameter.getDataSource(),
                                 parameter.isSettable(),
                                 parameter.getInitialValue(),
                                 parameter.getDescription() };

            tableModel.addRow( rowData );

            if ( parameter.isValid() == false ) {
                logMsg( XTCEFunctions.getText( "error_invalid_parametertype" ) + // NOI18N
                        " '" + // NOI18N
                        parameter.getName() +
                        "' (" + // NOI18N
                        XTCEFunctions.getText( "find_menu_spacesystem_label" ) + // NOI18N
                        " " + // NOI18N
                        spaceSystem.getFullPath() +
                        ")" ); // NOI18N
            }

        }

    }

    private void updateContainerTable( XTCEContainerContentModel containerModel ) {

        DefaultTableModel tableModel = (DefaultTableModel)tmContainerTable.getModel();
        tableModel.setRowCount( 0 );

        if ( containerModel == null ) {
            tmContainerDrawingScrollPane.setViewportView( null );
            return;
        }

        List<String> warnings = containerModel.getWarnings();
        for ( String warning : warnings ) {
            logMsg( XTCEFunctions.getText( "general_warning" ) +  ": " + warning ); // NOI18N
        }

        List<XTCEContainerContentEntry> entries = containerModel.getContentList();

        tmContainerTable.setDefaultRenderer( String.class,
                                             new XTCEViewerContainerTableCellRenderer( entries ) );

        boolean showAllNamespaces   = prefs.getShowAllAliasNamespacesOption();
        boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
        String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();

        for ( XTCEContainerContentEntry entry : entries ) {

            String aliasString = ""; // NOI18N
            String name        = ""; // NOI18N
            if ( entry.getEntryType() == FieldType.PARAMETER ) {
                aliasString =
                    XTCEFunctions.makeAliasDisplayString( entry.getParameter(),
                                                          showAllNamespaces,
                                                          showAliasNamespaces,
                                                          preferredNamespace );
                name = entry.getParameter().getName();
            }

            String containerName = null;
            if ( entry.getEntryType() == FieldType.PARAMETER ) {
                containerName = entry.getHoldingContainer().getName();
            } else if ( entry.getEntryType() == FieldType.CONTAINER ) {
                containerName = entry.getTelemetryContainer().getName();
            } else {
                containerName = "UNDEFINED"; // NOI18N
            }

            Object rowData[] = { containerName,
                                 name,
                                 aliasString,
                                 entry.getRawSizeInBits(),
                                 entry.getStartBit(),
                                 entry.getValue(),
                                 entry.getInitialValue(),
                                 entry.getConditions(),
                                 entry.getRepeatParameterInfo() };

            tableModel.addRow( rowData );

        }

    }

    private void updateTelecommandTable( XTCETelecommandContentModel containerModel ) {

        DefaultTableModel tableModel = (DefaultTableModel)tcContentTable.getModel();
        tableModel.setRowCount( 0 );

        if ( containerModel == null ) {
            return;
        } else {
            System.out.println( "Telecommand Table Not Yet Implemented" );
        }

        //ArrayList<String> warnings = containerModel.getWarnings();
        //for ( String warning : warnings ) {
        //    logMsg( XTCEFunctions.getText( "general_warning" ) +  ": " + warning );
        //}

        //ArrayList<XTCETelecommandContentEntry> entries = containerModel.getContentList();

    }

    private void updateTelecommandTree( List<XTCETelecommand> telecommands, XTCESpaceSystem spaceSystem ) {

        if ( telecommands == null ) {
            return;
        }

        DefaultTreeModel tmodel = (DefaultTreeModel)tcTree.getModel();

        Collections.sort( telecommands );

        XTCEViewerTelecommandTreeNode rootObj =
            new XTCEViewerTelecommandTreeNode( XTCEFunctions.getText( "dialog_metrics_telecommands_text" ), // NOI18N
                                               null );
        tmodel.setRoot( rootObj );

        tcTree.setCellRenderer( new XTCEViewerTelecommandTreeCellRenderer() );

        boolean showAllNamespaces   = prefs.getShowAllAliasNamespacesOption();
        boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
        String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();

        for ( XTCETelecommand telecommand : telecommands ) {
            //String[] fields = telecommand.getInheritancePath().split( "/" );
            //XTCEViewerTelecommandTreeNode obj = rootObj;
            //for ( int jjj = 1; jjj < fields.length; ++jjj ) {
            //    obj = setTelecommandTreeNode( obj, telecommand );
            //}
            String aliasString =
                XTCEFunctions.makeAliasDisplayString( telecommand,
                                                      showAllNamespaces,
                                                      showAliasNamespaces,
                                                      preferredNamespace );
            String telecommandLabel = null;
            if ( aliasString.isEmpty() == false ) {
                telecommandLabel = telecommand.getName() + " (" + aliasString + ")";
            } else {
                telecommandLabel = telecommand.getName();
            }
            XTCEViewerTelecommandTreeNode newchild =
                new XTCEViewerTelecommandTreeNode( telecommandLabel, telecommand );
            //obj.add( newchild );
            rootObj.add( newchild );
        }

        tcTree.setRootVisible( false );

        tmodel.reload();

    }

    /** Private method to retrieve the JTree for the SpaceSystem that is in the
     * current working tab on the GUI screen.
     *
     * This function is useful because several tabs have some similar menu
     * items, such as to expand all the Space Systems in the tree.  This makes
     * a single implementation generic to all tabs.
     *
     * @return JTree from the current working tab, or null if there is no
     * SpaceSystem tree on the current tab.
     *
     */

    private JTree getCurrentSpaceSystemTree() {

        JTree tree = null;
        int idx = mainWindowPrimaryWorkspace.getSelectedIndex();
        if ( idx == 0 ) {
            tree = detailSpaceSystemTree;
        } else if ( idx == 1 ) {
            tree = tmParameterSpaceSystemTree;
        } else if ( idx == 2 ) {
            tree = tcParameterSpaceSystemTree;
        }

        return tree;

    }

    private XTCESpaceSystem getCurrentSpaceSystemFromTree() {

        JTree tree = getCurrentSpaceSystemTree();
        if ( tree == null ) {
            return null;
        }

        XTCEViewerSpaceSystemTreeNode node =
            (XTCEViewerSpaceSystemTreeNode)tree.getLastSelectedPathComponent();
        if ( node == null ) {
            return null;
        }

        return node.getSpaceSystemReference();

    }

    private boolean selectContainerFromTree( String searchString ) {

        DefaultTreeModel tmodel = (DefaultTreeModel)tmContainerTree.getModel();
        XTCEViewerContainerTreeNode obj = (XTCEViewerContainerTreeNode)tmodel.getRoot();
        Enumeration eee = obj.breadthFirstEnumeration();
        while ( eee.hasMoreElements() == true ) { 
            XTCEViewerContainerTreeNode node = (XTCEViewerContainerTreeNode)eee.nextElement();
            if ( node.getContainerReference() == null ) {
                continue;
            }
            if ( node.getContainerReference().getInheritancePath().equals( searchString ) == true ) {
                TreeNode[] nodes = tmodel.getPathToRoot( node );
                TreePath path = new TreePath( nodes );
                tmContainerTree.setSelectionPath( path );
                tmContainerTree.scrollPathToVisible( path );
                tmodel.nodeChanged( node );
                return true;
            }
        }
        return false;

    }

    private boolean selectTelecommandFromTree( String searchString ) {

        DefaultTreeModel tmodel = (DefaultTreeModel)tcTree.getModel();
        XTCEViewerTelecommandTreeNode obj = (XTCEViewerTelecommandTreeNode)tmodel.getRoot();
        Enumeration eee = obj.breadthFirstEnumeration();
        while ( eee.hasMoreElements() == true ) { 
            XTCEViewerTelecommandTreeNode node = (XTCEViewerTelecommandTreeNode)eee.nextElement();
            if ( node.getTelecommandReference() == null ) {
                continue;
            }
            if ( node.getTelecommandReference().getName().equals( searchString ) == true ) {
                TreeNode[] nodes = tmodel.getPathToRoot( node );
                TreePath path = new TreePath( nodes );
                tcTree.setSelectionPath( path );
                tcTree.scrollPathToVisible( path );
                tmodel.nodeChanged( node );
                return true;
            }
        }
        return false;

    }

    private boolean selectParameterFromTable( JTable table, String searchString, boolean findByName ) {

        boolean showAliasNamespaces = prefs.getShowAliasNamespacesOption();
        String  preferredNamespace  = prefs.getPreferredAliasNamespaceOption();
        TableModel tm = table.getModel();
        for ( int iii = 0; iii < tm.getRowCount(); ++iii ) {
            if ( findByName == true ) {
                if ( ((String)tm.getValueAt( iii, 0 )).equals( searchString ) == true ) {
                    int viewportRow = table.getRowSorter().convertRowIndexToView( iii );
                    table.setRowSelectionInterval( viewportRow, viewportRow );
                    table.scrollRectToVisible( new Rectangle( table.getCellRect( viewportRow, 0, true ) ) );
                    return true;
                }
            } else {
                if ( ( preferredNamespace.isEmpty() == false ) && ( showAliasNamespaces == false ) ) {
                    if ( ((String)tm.getValueAt( iii, 1 )).equals( searchString ) == true ) {
                        int viewportRow = table.getRowSorter().convertRowIndexToView( iii );
                        table.setRowSelectionInterval( viewportRow, viewportRow );
                        table.scrollRectToVisible( new Rectangle( table.getCellRect( viewportRow, 0, true ) ) );
                        return true;
                    }
                } else if ( ( preferredNamespace.isEmpty() == false ) && ( showAliasNamespaces == true ) ) {
                    if ( ((String)tm.getValueAt( iii, 1 )).endsWith( "::" + searchString ) == true ) {
                        int viewportRow = table.getRowSorter().convertRowIndexToView( iii );
                        table.setRowSelectionInterval( viewportRow, viewportRow );
                        table.scrollRectToVisible( new Rectangle( table.getCellRect( viewportRow, 0, true ) ) );
                        return true;
                    }
                } else {
                    String aliasField = (String)tm.getValueAt( iii, 1 );
                    String fields[] = aliasField.split( " " );
                    for ( String field : fields ) {
                        if ( showAliasNamespaces == true ) {
                            if ( field.endsWith( "::" + searchString ) == true ) {
                                int viewportRow = table.getRowSorter().convertRowIndexToView( iii );
                                table.setRowSelectionInterval( viewportRow, viewportRow );
                                table.scrollRectToVisible( new Rectangle( table.getCellRect( viewportRow, 0, true ) ) );
                                return true;
                            }
                        } else {
                            if ( field.equals( searchString ) == true ) {
                                int viewportRow = table.getRowSorter().convertRowIndexToView( iii );
                                table.setRowSelectionInterval( viewportRow, viewportRow );
                                table.scrollRectToVisible( new Rectangle( table.getCellRect( viewportRow, 0, true ) ) );
                                return true;
                            }
                        }
                    }
                }
            }
        }

        return false;

    }

    /** Method to load a new XTCE database file, taking into account that one
     * might already be loaded and offering the user an opportunity to save
     * this or cancel before closing an already open file.
     *
     * @param dbFile File object in Java to use to open the file.
     *
     * @param applyXInclude Boolean indicating if the file should be opened
     * with XInclude processing enabled.
     *
     * @param validateOnLoad Boolean indicating if the file should be validated
     * against schema on load.
     *
     */

    public void openFile( File dbFile, boolean applyXInclude, boolean validateOnLoad ) {

        // in the event that a file is already open, we should attempt to
        // close the file before creating a new database.

        if ( xtceDatabaseFile != null ) {
            mainWindowCloseFileMenuItemActionPerformed( null );
        }

        // this extra test captures the case where a file is open and the user
        // chose to cancel the save and close, leaving the original file open.

        if ( xtceDatabaseFile != null ) {
            return;
        }

        try {

            logMsg( XTCEFunctions.getMemoryUsageStatistics() );

            long    startTime      = System.currentTimeMillis();

            //XTCEViewerProgressMonitor progressDialog = new XTCEViewerProgressMonitor( this, true );
            //XTCEViewerProgressListener listener = new XTCEViewerProgressListener( progressDialog );

            xtceDatabaseFile = new XTCEDatabase( dbFile,
                                                 validateOnLoad,
                                                 applyXInclude,
                                                 null );

            loadedFilenameLabel.setText( dbFile.getAbsolutePath() );

            if ( validateOnLoad == true ) {
                loadedSchemaLabel.setText( xtceDatabaseFile.getSchemaFromDocument() );
            }

            buildSpaceSystemTrees();

            prefs.updateRecentFilesList( mainWindowOpenRecentMenu, dbFile );

            if ( dbFile.getParent() != null ) {
                prefs.setCurrentWorkingDirectory( dbFile.getParent() );
            }

            detailSpaceSystemTree.setSelectionRow( 0 );
            mainWindowPrimaryWorkspace.setSelectedIndex( 0 );

            long estimatedTime = System.currentTimeMillis() - startTime;

            logMsg( XTCEFunctions.getText( "file_chooser_load_time_text" ) + // NOI18N
                " " + // NOI18N
                Long.toString( estimatedTime / 1000 ) +
                " " + // NOI18N
                XTCEFunctions.getText( "file_chooser_load_time_unit_text" ) + // NOI18N
                " " + // NOI18N
                ( validateOnLoad == true ? "" : " (" + XTCEFunctions.getText( "file_chooser_schema_disable_text" ) + ")" ) ); // NOI18N

            logMsg( XTCEFunctions.getMemoryUsageStatistics() );

        } catch ( XTCEDatabaseException ex ) {

            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "dialog_unabletoload_text" ) + // NOI18N
                    " " +
                    dbFile.getAbsolutePath() );
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    ex.getLocalizedMessage() );

        }

    }

    /** Private method to open a help dialog browser.
     *
     * The help dialog browser is not limited to just having a single one open
     * for each case, unlike some other dialogs that are kept track of by this
     * GUI class.  As a result, it is possible to open several of the same help
     * type screen.  This can be convenient for the user.  In addition, this
     * is not blocked by whether or not a database file is loaded.  Help
     * browsers are independent of the data.
     *
     * @param helpFile String containing the system resource file path to use
     * for the browser root.
     *
     */

    private void openHelp( String helpFile ) {

        // this method no longer uses the XTCEViewerHelpDialog class in favor
        // of a version that uses a Java FX Panel that does a nicer job at the
        // html rendering.  the old class is kept around so that I can edit the
        // form to add things and copy the generated code over to the new class
        // since NetBeans is not configured for FX in this project right now.

        URL helpURL = ClassLoader.getSystemResource( helpFile );

        if ( helpURL != null ) {
            //XTCEViewerHelpDialog dialog =
            //    new XTCEViewerHelpDialog( this, false, helpURL );
            XTCEViewerHelpBrowserDialog dialog =
                  new XTCEViewerHelpBrowserDialog( this, false, helpURL );
        } else {
            logMsg( XTCEFunctions.generalErrorPrefix() +
                    XTCEFunctions.getText( "dialog_unabletoload_text" ) + // NOI18N
                    ": " + // NOI18N
                    helpFile );
        }

    }

    /** Private method to test if a database file is loaded in memory and
     * return true if the warning dialog was displayed to the user.
     *
     * This method is used to shortcut selections of menu items that cannot
     * reasonably be used when there is no file loaded.  Callbacks use this to
     * return prematurely when the return value is true.
     *
     * @return boolean indicating if the user was warned that there is not a
     * file open.
     *
     */

    private boolean fileOpenWarning() {

        if ( xtceDatabaseFile == null ) {
            JOptionPane.showMessageDialog(
                this,
                XTCEFunctions.getText( "dialog_nofileisopen_text" ), // NOI18N
                XTCEFunctions.getText( "general_error" ), // NOI18N
                JOptionPane.ERROR_MESSAGE );
            return true;
        } else {
            return false;
        }

    }

    /** Private method to append a log message to the Messages portion of the
     * GUI main window.
     *
     * @param msg String containing the message to append.
     *
     */

    private void logMsg( String msg ) {
        
        if ( messagesText.getText().equals( XTCEFunctions.getText( "no_messages_text" ) ) == true ) { // NOI18N
            messagesText.setText( "" ); // NOI18N
        }
        messagesText.append( msg + "\n" ); // NOI18N

    }

    /** This is the main function that launches the XTCE Viewer/Browser/Editor
     * application.
     *
     * @param args the command line arguments, of which none are used for this
     * application.
     *
     */

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
                //System.out.println( info.getName() );
            }
            //System.setProperty( "apple.laf.useScreenMenuBar", "true" );
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XTCEViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XTCEViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XTCEViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XTCEViewer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new XTCEViewer().setVisible(true);
            }
        });
    }

    // Private Data Members

    private XTCEViewerPreferences          prefs                = null;
    private XTCEDatabase                   xtceDatabaseFile     = null;
    private List<XTCESpaceSystem>          spaceSystems         = null;
    private XTCEViewerXpathQueryDialog     xpathDialog          = null;
    private XTCEViewerParameterFindDialog  findParameterDialog  = null;
    private XTCEViewerParameterUsageDialog parameterUsageDialog = null;


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addSpaceSystemMenuItem;
    private javax.swing.JTextField argumentTypesTotal;
    private javax.swing.JTextField argumentsTotal;
    private javax.swing.JMenuItem cloneContainerDrawingMenuItem;
    private javax.swing.JPopupMenu containerDetailPopupMenu;
    private javax.swing.JRadioButtonMenuItem containerDrawingLeftToRight;
    private javax.swing.JMenu containerDrawingOrientationMenu;
    private javax.swing.JPopupMenu containerDrawingPopupMenu;
    private javax.swing.JRadioButtonMenuItem containerDrawingTopToBottom;
    private javax.swing.JPopupMenu containerTablePopupMenu;
    private javax.swing.JTextField containersTotal;
    private javax.swing.JMenuItem copyContainerCellMenuItem;
    private javax.swing.JMenuItem copyParameterCellMenuItem;
    private javax.swing.JPanel databaseMetricsPanel;
    private javax.swing.JMenuItem deleteSpaceSystemMenuItem;
    private javax.swing.JScrollPane detailSpaceSystemPanelScrollPane;
    private javax.swing.JTree detailSpaceSystemTree;
    private javax.swing.JScrollPane detailSpaceSystemTreeScrollPane;
    private javax.swing.ButtonGroup exportParametersButtonGroup;
    private javax.swing.JRadioButton exportParametersCometRadioButton;
    private javax.swing.JRadioButton exportParametersCppRadioButton;
    private javax.swing.JRadioButton exportParametersCsvRadioButton;
    private javax.swing.JRadioButton exportParametersInControlRadioButton;
    private javax.swing.JCheckBox exportParametersIncludeHeaderRowCheckbox;
    private javax.swing.JLabel exportParametersLabel;
    private javax.swing.JCheckBox exportParametersUseNamespacesCheckbox;
    private javax.swing.JMenuItem goToEntryMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JLabel loadedFilenameLabel;
    private javax.swing.JLabel loadedSchemaLabel;
    private javax.swing.JMenuItem mainWindowClearMessagesMenuItem;
    private javax.swing.JMenuItem mainWindowClearRecentFilesMenuItem;
    private javax.swing.JMenuItem mainWindowCloseFileMenuItem;
    private javax.swing.JMenuItem mainWindowCreateFileMenuItem;
    private javax.swing.JCheckBoxMenuItem mainWindowEditDocumentMenuItem;
    private javax.swing.JMenu mainWindowEditMenu;
    private javax.swing.JMenuItem mainWindowExitMenuItem;
    private javax.swing.JMenuItem mainWindowExpandAllSpaceSystemTreeMenuItem;
    private javax.swing.JMenuItem mainWindowExpandContainerTreeMenuItem;
    private javax.swing.JMenu mainWindowExportMenu;
    private javax.swing.JMenuItem mainWindowExportParametersMenuItem;
    private javax.swing.JMenu mainWindowFileMenu;
    private javax.swing.JMenuItem mainWindowFindByXPathMenuItem;
    private javax.swing.JMenuItem mainWindowFindContainerMenuItem;
    private javax.swing.JMenu mainWindowFindMenu;
    private javax.swing.JMenuItem mainWindowFindParameterMenuItem;
    private javax.swing.JMenuItem mainWindowFindSpaceSystemMenuItem;
    private javax.swing.JMenuItem mainWindowFindTelecommandMenuItem;
    private javax.swing.JMenuItem mainWindowHelpAboutMenuItem;
    private javax.swing.JMenuItem mainWindowHelpApiMenuItem;
    private javax.swing.JMenuItem mainWindowHelpCurrentMenuItem;
    private javax.swing.JMenu mainWindowHelpMenu;
    private javax.swing.JMenuItem mainWindowHelpSchemaMenuItem;
    private javax.swing.JMenuItem mainWindowHelpToolMenuItem;
    private javax.swing.JMenuItem mainWindowLocaleMenuItem;
    private javax.swing.JMenuBar mainWindowMenuBar;
    private javax.swing.JScrollPane mainWindowMessageScrollingPane;
    private javax.swing.JMenuItem mainWindowMessagesDialogMenuItem;
    private javax.swing.JMenu mainWindowOpenExampleMenu;
    private javax.swing.JMenuItem mainWindowOpenFileMenuItem;
    private javax.swing.JMenu mainWindowOpenRecentMenu;
    private javax.swing.JMenu mainWindowOptionsMenu;
    private javax.swing.JMenuItem mainWindowPreferredNamespaceMenuItem;
    private javax.swing.JTabbedPane mainWindowPrimaryWorkspace;
    private javax.swing.JMenuItem mainWindowRecentFilesMaxMenuItem;
    private javax.swing.JMenuItem mainWindowSaveFileMenuItem;
    private javax.swing.JCheckBoxMenuItem mainWindowShowAliasNamespaceMenuItem;
    private javax.swing.JCheckBoxMenuItem mainWindowShowAllConditionalsMenuItem;
    private javax.swing.JMenu mainWindowShowMenu;
    private javax.swing.JMenuItem mainWindowShowMetricsMenuItem;
    private javax.swing.JCheckBoxMenuItem mainWindowUseXincludeMenuItem;
    private javax.swing.JCheckBoxMenuItem mainWindowValidateOnLoadMenuItem;
    private javax.swing.JScrollPane messagesDialogPanel;
    private javax.swing.JTextArea messagesDialogText;
    private javax.swing.JLabel messagesOutputLabel;
    private javax.swing.JTextArea messagesText;
    private javax.swing.JPopupMenu parameterDetailPopupMenu;
    private javax.swing.JPanel parameterExportPanel;
    private javax.swing.ButtonGroup parameterFieldExclusion;
    private javax.swing.ButtonGroup parameterLocationExclusion;
    private javax.swing.JTextField parameterTypesTotal;
    private javax.swing.JTextField parametersTotal;
    private javax.swing.JMenuItem saveContainerDrawingMenuItem;
    private javax.swing.JMenuItem setConditionTrueMenuItem;
    private javax.swing.JMenuItem showContainerXmlMenuItem;
    private javax.swing.JMenuItem showEncodeDecodeDialogMenuItem;
    private javax.swing.JMenuItem showItemXmlElementsMenuItem;
    private javax.swing.JMenuItem showParameterDetailsMenuItem;
    private javax.swing.JMenuItem showParameterUsageMenuItem;
    private javax.swing.JMenuItem showXmlElementsMenuItem;
    private javax.swing.JPopupMenu spaceSystemDetailPopupMenu;
    private javax.swing.JLabel spaceSystemOverviewLabel;
    private javax.swing.JPanel spaceSystemOverviewPanel;
    private javax.swing.JTextField spaceSystemsTotal;
    private javax.swing.JTextField tcContainersTotal;
    private javax.swing.JScrollPane tcContentDrawingScrollPane;
    private javax.swing.JScrollPane tcContentScrollPane;
    private javax.swing.JSplitPane tcContentSplitPane;
    private javax.swing.JTable tcContentTable;
    private javax.swing.JLabel tcDefinitionsLabel;
    private javax.swing.JPanel tcDefinitionsPanel;
    private javax.swing.JScrollPane tcDefinitionsScrollPane;
    private javax.swing.JTree tcDefinitionsSpaceSystemTree;
    private javax.swing.JTree tcParameterSpaceSystemTree;
    private javax.swing.JScrollPane tcParameterSpaceSystemTreeScrollPane;
    private javax.swing.JTextField tcParameterTypesTotal;
    private javax.swing.JLabel tcParametersOverviewLabel;
    private javax.swing.JPanel tcParametersPanel;
    private javax.swing.JTable tcParametersTable;
    private javax.swing.JScrollPane tcParametersTableScrollPane;
    private javax.swing.JTextField tcParametersTotal;
    private javax.swing.JSplitPane tcSpaceSystemSplitPane;
    private javax.swing.JTree tcTree;
    private javax.swing.JScrollPane tcTreeScrollPane;
    private javax.swing.JPanel tcTypesPanel;
    private javax.swing.JTextField telecommandsTotal;
    private javax.swing.JSplitPane tmContainerContentSplitPane;
    private javax.swing.JLabel tmContainerDetailsLabel;
    private javax.swing.JScrollPane tmContainerDrawingScrollPane;
    private javax.swing.JTable tmContainerTable;
    private javax.swing.JScrollPane tmContainerTableScrollPane;
    private javax.swing.JTree tmContainerTree;
    private javax.swing.JScrollPane tmContainerTreeScrollPane;
    private javax.swing.JPanel tmContainersPanel;
    private javax.swing.JTextField tmContainersTotal;
    private javax.swing.JTree tmParameterSpaceSystemTree;
    private javax.swing.JScrollPane tmParameterSpaceSystemTreeScrollPane;
    private javax.swing.JTextField tmParameterTypesTotal;
    private javax.swing.JLabel tmParametersOverviewLabel;
    private javax.swing.JPanel tmParametersPanel;
    private javax.swing.JTable tmParametersTable;
    private javax.swing.JScrollPane tmParametersTableScrollPane;
    private javax.swing.JTextField tmParametersTotal;
    private javax.swing.JTree tmStreamContentTree;
    private javax.swing.JLabel tmStreamDetailsLabel;
    private javax.swing.JTree tmStreamTree;
    private javax.swing.JScrollPane tmStreamTreeScrollPane;
    private javax.swing.JPanel tmStreamsPanel;
    private javax.swing.JPanel tmTypesPanel;
    // End of variables declaration//GEN-END:variables
}
