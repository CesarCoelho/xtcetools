/* Copyright 2015 David Overeem (dovereem@cox.net)
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * 
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */

package org.xtce.apps.editor.dialogs;

import java.util.BitSet;
import org.xtce.toolkit.XTCEContainerContentEntry;
import org.xtce.toolkit.XTCEContainerContentEntry.FieldType;
import org.xtce.toolkit.XTCEContainerEntryValue;
import org.xtce.toolkit.XTCEFunctions;

/** This is the JPanel that is used inside the scrollable region in the
 * XTCEViewerContainerContentDialog class.
 *
 * @author dovereem
 *
 */

public class XTCEViewerContainerContentRow extends javax.swing.JPanel {

    /** Constructor to create a new JPanel to display information about a
     * container content entry.
     *
     * @param entry XTCEContainerContentEntry from the processed container
     * content list.
     *
     * @param showAllNamespaces boolean indicating if the user preference to
     * show all alias namespace is set.  This is used for the first column that
     * displays the name of the item.
     *
     * @param showNamespaces boolean indicating if namespace names should be
     * shown per the user preference.  This is used for the first column that
     * displays the name of the item.
     *
     * @param preferredNamespace String containing the user preferred namespace
     * name, if there is one, based on the user preference.  This is used for
     * the first column that displays the name of the item.
     *
     */

    public XTCEViewerContainerContentRow( XTCEContainerContentEntry entry,
                                          boolean                   showAllNamespaces,
                                          boolean                   showNamespaces,
                                          String                    preferredNamespace ) {

        initComponents();

        String bitSize  = entry.getRawSizeInBits();
        int    byteSize = 0;

        if ( bitSize.isEmpty() == false ) {
            try {
                int bits = Integer.parseInt( bitSize );
                byteSize = bits / 8;
                if ( bits % 8 != 0 ) {
                    byteSize += 1;
                }
            } catch ( Exception ex ) {
                // do nothing
            }
        }

        XTCEContainerEntryValue valueObj = entry.getValue();

        if ( valueObj != null ) {
            calValueField.setText( valueObj.getCalibratedValue() );
            uncalValueField.setText( valueObj.getUncalibratedValue() );
            if ( byteSize != 0 ) {
                BitSet rawBits = valueObj.getRawValue();
                rawValueField.setText(
                    XTCEFunctions.bitSetToHex( rawBits, byteSize ) );
            }
        }

        String displayName = entry.getName();
        String aliasString = "";

        if ( entry.getEntryType() == FieldType.PARAMETER ) {
            aliasString =
                XTCEFunctions.makeAliasDisplayString( entry.getParameter(),
                                                      showAllNamespaces,
                                                      showNamespaces,
                                                      preferredNamespace );
        } else if ( entry.getEntryType() == FieldType.ARGUMENT ) {
            aliasString =
                XTCEFunctions.makeAliasDisplayString( entry.getArgument(),
                                                      showAllNamespaces,
                                                      showNamespaces,
                                                      preferredNamespace );
        }

        if ( aliasString.isEmpty() == true ) {
            itemNameField.setText( displayName );
        } else {
            itemNameField.setText( displayName + " (" + aliasString + ")" );
        }

        itemNameField.setCaretPosition( 0 );
        calValueField.setCaretPosition( 0 );
        uncalValueField.setCaretPosition( 0 );
        rawValueField.setCaretPosition( 0 );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemNameField = new javax.swing.JTextField();
        calValueField = new javax.swing.JTextField();
        uncalValueField = new javax.swing.JTextField();
        rawValueField = new javax.swing.JTextField();

        itemNameField.setEditable(false);

        calValueField.setEditable(false);

        uncalValueField.setEditable(false);

        rawValueField.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(itemNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(calValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uncalValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rawValueField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(itemNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(calValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(uncalValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(rawValueField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField calValueField;
    private javax.swing.JTextField itemNameField;
    private javax.swing.JTextField rawValueField;
    private javax.swing.JTextField uncalValueField;
    // End of variables declaration//GEN-END:variables

}
